
// Добавить или изменяет запись регистра
//
// Параметры:
//  СтруктураЗаписи	 - Структура - Необходимая структура для записи в регистр
// 
// Возвращаемое значение:
//  Булево - Истина -запись прошла без ошибок, Ложь - были ошибки при записи
//
Функция ДобавитьИзменитьЗапись(СтруктураЗаписи) Экспорт   
	
	Результат = Ложь;
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	
	Если ТипЗнч(СтруктураЗаписи) <> Тип("Структура") Тогда
		
		ТекстОшибки = НСтр("ru = 'Запись не является Структурой'; en = 'Record is not a Structure'");		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьДействийСДокументами");
		
		Возврат Результат; 
		
	КонецЕсли;
	
	Если Не СтруктураЗаписи.Свойство("ТипОбъекта") Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Отсутствует свойство ""ТипОбъекта""'; en = 'Object type property is missing'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьДействийСДокументами");
		
		Возврат Результат;		
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.ТипОбъекта) Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Не заполнен ""ТипОбъекта""'; en = 'Object type not filled in'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьДействийСДокументами");
		
		Возврат Результат;		
				
	КонецЕсли;
	
	Если Не СтруктураЗаписи.Свойство("ИдОбъекта") Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Отсутствует свойство ""ИдОбъекта""'; en = 'Object ID property is missing'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьДействийСДокументами");
		
		Возврат Результат;		
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.ИдОбъекта) Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Не заполнен ""ИдОбъекта""'; en = 'Object ID not filled in'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьДействийСДокументами");
		
		Возврат Результат;		
				
	КонецЕсли;
	
	
	Если Не СтруктураЗаписи.Свойство("ДатаИзменения") Тогда     
		
		СтруктураЗаписи.Вставить("ДатаИзменения", ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.ДатаИзменения) Тогда
		
		СтруктураЗаписи.Вставить("ДатаИзменения", ТекущаяДатаСеанса());	
		
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.PAPI_ОчередьДействийСДокументами.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.ТипОбъекта.Установить(СтруктураЗаписи.ТипОбъекта);
	НаборЗаписей.Отбор.ИдОбъекта.Установить(СтруктураЗаписи.ИдОбъекта);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗаписьРегистра = НаборЗаписей.Добавить();  	
		
	Иначе //НаборЗаписей.Количество() > 0
				
		НоваяЗаписьРегистра = НаборЗаписей[0]; 	
				
	КонецЕсли;

	МассивПолейРегистра = МассивПолейРегистра();
	
	Попытка
		
		Для Каждого элМассива Из МассивПолейРегистра Цикл 
				
			Если СтруктураЗаписи.Свойство(элМассива) Тогда
				
				НоваяЗаписьРегистра[элМассива] = СтруктураЗаписи[элМассива];
					
			КонецЕсли	
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("PAPIОтключитьПодпискуПередЗаписью");
		
		НаборЗаписей.Записать();
		Результат = Истина;
		
	Исключение

		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьДействийСДокументами");						
					
	КонецПопытки;
		
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат; 	
	
КонецФункции

// Выполнить действие с документом
//
// Параметры:
//  СтруктураЗаписи	 - Структура - см. ПолучитьСтруктуруПоУмолчанию 
//
Процедура ВыполнитьДействие(СтруктураЗаписи) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	СтруктураДанных = PAPI_ОбщегоНазначенияВызовСервера.СтруктураНавигационнойСсылки(СтруктураЗаписи.ИдОбъекта, "Ссылка");	
		
	Если СтруктураДанных.Отработал 
		И СтруктураДанных.Свойство("Результат") Тогда 
		
		ТипОбъекта = СтруктураДанных.Результат.ТипОбъекта;
	    ИдОбъекта  = СтруктураДанных.Результат.ИдОбъекта;   
		
	Иначе
		
		ТипОбъекта = СтруктураЗаписи.ТипОбъекта;
	    ИдОбъекта  = СтруктураЗаписи.ИдОбъекта; 
		
	КонецЕсли;	
					
	перВыполнено = Истина;		
	перКоличествоПопыток = СтруктураЗаписи.КоличествоПопыток;
		
	Попытка
			
		НайденнаяСсылка = XMLЗначение(Тип(ТипОбъекта), ИдОбъекта);
		перСсылкаСуществует = PAPI_ОбщегоНазначенияВызовСервера.СсылкаСуществует(НайденнаяСсылка);
			
		Если перСсылкаСуществует Тогда 
				
			ЭлОбъект = НайденнаяСсылка.ПолучитьОбъект();
			ЭлОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбработкуПослеЗаписиВерсии");
			ЭлОбъект.ДополнительныеСвойства.Вставить("ОчередьДействийСДокументами");		
				
			Если СтруктураЗаписи.Действие = Перечисления.PAPI_ДействиеСДокументом.Запись Тогда  
					
				ЭлОбъект.Записать(); 
			
			ИначеЕсли СтруктураЗаписи.Действие = Перечисления.PAPI_ДействиеСДокументом.ОтменаПроведения Тогда
					
				ЭлОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
				
			ИначеЕсли СтруктураЗаписи.Действие = Перечисления.PAPI_ДействиеСДокументом.Проведение Тогда  
					
				ЭлОбъект.Записать(РежимЗаписиДокумента.Проведение);	
					
			ИначеЕсли СтруктураЗаписи.Действие = Перечисления.PAPI_ДействиеСДокументом.ПроведениеНеоперативный Тогда
					
				ЭлОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					
			ИначеЕсли СтруктураЗаписи.Действие = Перечисления.PAPI_ДействиеСДокументом.СнятьПометкуУдаления Тогда  
					
				ЭлОбъект.УстановитьПометкуУдаления(Ложь);
							
			ИначеЕсли СтруктураЗаписи.Действие = Перечисления.PAPI_ДействиеСДокументом.УстановитьПометкуУдаления Тогда  
					
				ЭлОбъект.УстановитьПометкуУдаления(Истина);		
				
			Иначе            
					
				ЭлОбъект.ОбменДанными.Загрузка = Истина;
				ЭлОбъект.Записать();
					
			КонецЕсли;		

			НайденнаяСсылка = ЭлОбъект.Ссылка;
	
			СтруктураЗаписи.Вставить("Представление", Строка(НайденнаяСсылка));
			СтруктураЗаписи.Вставить("ТекстОшибки", "");
			
		КонецЕсли;
					
	Исключение
			
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());  
		перВыполнено = Ложь;     
		СтруктураЗаписи.Вставить("ТекстОшибки", ТекстОшибки);
				
	КонецПопытки;
		
	СтруктураЗаписи.Вставить("Выполнено", перВыполнено);
	перКоличествоПопыток = перКоличествоПопыток + 1;
	СтруктураЗаписи.Вставить("КоличествоПопыток", перКоличествоПопыток);
		
	ДобавитьИзменитьЗапись(СтруктураЗаписи);
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры	

// Возвращает массив полей регистра
// 
// Возвращаемое значение:
//  Массив - Поля заполняемые при создании записи
//
Функция МассивПолейРегистра()
	
	МассивПолейРегистра = Новый Массив;  
	
	// Измерения
	МассивПолейРегистра.Добавить("ТипОбъекта");
	МассивПолейРегистра.Добавить("ИдОбъекта");
	
	// Стандартные свойства сообщения
	МассивПолейРегистра.Добавить("Действие");
	
	// Параметры с информацией по обмену
	МассивПолейРегистра.Добавить("Представление");
	
	// Отметка о выполнении
	МассивПолейРегистра.Добавить("Выполнено");
	
	// Ошибка записи
	МассивПолейРегистра.Добавить("ТекстОшибки");
	МассивПолейРегистра.Добавить("КоличествоПопыток");
	
	// Дата изменения
	МассивПолейРегистра.Добавить("ДатаИзменения");
	
	Возврат МассивПолейРегистра;
	
КонецФункции

// Возвращает массив полей регистра "PAPI_ОчередьДействийСДокументами"
//
// Возвращаемое значение:
//  СтруктураРегистра - Структура:
//		ТипОбъекта			- Строка - Тип документа
//		ИдОбъекта			- Строка - Уникальный идентификатор или навигационная ссылка
//		Действие			- Перечисления.PAPI_ДействиеСДокументом - Что нужно сделать с документом  
//		Представление		- Строка - Представление документа
//		Выполнено			- Булево - Признак выполнения
//		ТекстОшибки			- Строка - Описание произошедшей ошибки в ходе выполнения алгоритма 
//		КоличествоПопыток	- Число  - Количество неудачных попыток (ограничено в константе PAPI_КоличествоПопытокОчередиДокументов)
//
Функция ПолучитьСтруктуруПоУмолчанию() Экспорт
	
	СтруктураРегистра = Новый Структура;
	СтруктураРегистра.Вставить("ТипОбъекта", 		"");
	СтруктураРегистра.Вставить("ИдОбъекта", 		"");
	СтруктураРегистра.Вставить("Действие", 			Перечисления.PAPI_ДействиеСДокументом.ПустаяСсылка());
	СтруктураРегистра.Вставить("Представление",		"");
	СтруктураРегистра.Вставить("Выполнено",			Ложь);
	СтруктураРегистра.Вставить("ТекстОшибки",		"");
	СтруктураРегистра.Вставить("КоличествоПопыток", 0);
	СтруктураРегистра.Вставить("ДатаИзменения", 	Дата(1,1,1,0,0,0));	
	
	Возврат СтруктураРегистра;    
	
КонецФункции	

