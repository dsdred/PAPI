#Область СлужебныеПроцедурыИФункции

// Добавить или изменяет запись регистра
//
// Параметры:
//  СтруктураЗаписи	 - Структура - Необходимая структура для записи в регистр
// 
// Возвращаемое значение:
//  Результат - Булево 
//
Функция ДобавитьИзменитьЗапись(СтруктураЗаписи, Создавать = Истина) Экспорт

	Результат = Ложь;
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	 
	
	
	Если ТипЗнч(СтруктураЗаписи) <> Тип("Структура") Тогда
		
		ТекстОшибки = НСтр("ru = 'Запись не является Структурой'; en = 'Record is not a Structure'");		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ЗапросНедостающихДанных");
		
		Возврат Результат; 
		
	КонецЕсли;
	
	Если Не СтруктураЗаписи.Свойство("Идентификатор") Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Отсутствует свойство ""Идентификатор""'; en = 'Identifier property is missing'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ЗапросНедостающихДанных");
		
		Возврат Результат;		
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.Идентификатор) Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Не заполнен ""Идентификатор""'; en = 'Identifier not filled in'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ЗапросНедостающихДанных");
		
		Возврат Результат;		
				
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.PAPI_ЗапросНедостающихДанных.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Идентификатор.Установить(СтруктураЗаписи.Идентификатор);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Если Не Создавать Тогда 
			Возврат Истина;	
		КонецЕсли;	
		
		НоваяЗаписьРегистра = НаборЗаписей.Добавить();  		
		МассивПолейРегистра = МассивПолейРегистра();		
	
	Иначе // НаборЗаписей.Количество() > 0
				
		НоваяЗаписьРегистра = НаборЗаписей[0]; 	
		МассивПолейРегистра = МассивПолейИзмененияРегистра();	
		
	КонецЕсли;
	
	Попытка
		
		Для Каждого элМассива Из МассивПолейРегистра Цикл 
				
			Если СтруктураЗаписи.Свойство(элМассива) Тогда
				
				НоваяЗаписьРегистра[элМассива] = СтруктураЗаписи[элМассива];
					
			КонецЕсли	
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("PAPIОтключитьПодпискуПередЗаписью");
		
		НаборЗаписей.Записать();
		Результат = Истина;
		
	Исключение

		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ЗапросНедостающихДанных");						
					
	КонецПопытки;
		
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

// Удалить устаревшие записи
//
// Параметры: 
//  ДатаОтправки - Дата - Дата по которую следует удалить записи
// 
Процедура УдалитьУстаревшиеЗаписи(ДатаОтправки = Неопределено) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.PAPI_ЗапросНедостающихДанных
		|ГДЕ
		|	ДатаОтправки <= &ДатаОтправки
		|	И ДанныеПрочитаны";
	
	Если Не ЗначениеЗаполнено(ДатаОтправки) Тогда 
		ДатаОтправки = ТекущаяДатаСеанса(); 
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОтправки", ДатаОтправки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		НаборЗаписей = РегистрыСведений.PAPI_ЗапросНедостающихДанных.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Идентификатор.Установить(ВыборкаДетальныеЗаписи.Идентификатор);
		НаборЗаписей.Записать();    
		
	КонецЦикла;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры


// Возвращает идентификатор входящего запроса
//
// Параметры:
//  Идентификатор - Уникальный идентификатор	 - Идентификатор запроса недостающих данных
// 
// Возвращаемое значение:
//  Результат - Структура
//
Функция ПолучитьИдентификаторВходящегоЗапроса(Идентификатор) Экспорт 

    Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВходящийИдентификатор КАК ВходящийИдентификатор,
		|	КодОтправителя КАК КодОтправителя
		|ИЗ
		|	РегистрСведений.PAPI_ЗапросНедостающихДанных
		|ГДЕ
		|	Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Результат.Вставить("Результат", Новый Структура("ВходящийИдентификатор,КодОтправителя", 
			ВыборкаДетальныеЗаписи.ВходящийИдентификатор, ВыборкаДетальныеЗаписи.КодОтправителя));
	Иначе
		Результат.Отработал = Ложь;
		Результат.ТекстОшибки = НСтр("ru = 'Данные входящего пакета отсутствуют.'; en = 'Incoming packet data missing.'")

	КонецЕсли;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции	

// Проверка наличия недостающих данных
//
// Параметры:
//  ВходящийИдентификатор	 - УникальныйИдентификатор - Идентификатор из Регистра сведений PAPI_ВходящиеСообщенияСервисаИнтеграции
//  КодОтправителя			 - Строка - КодОтправителя из Регистра сведений PAPI_ВходящиеСообщенияСервисаИнтеграции
// 
// Возвращаемое значение:
//  Результат - Булево 
//
Функция ЕстьЗапросыНедостающихДанных(ВходящийИдентификатор, КодОтправителя) Экспорт 
	
	Результат = Ложь;
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.PAPI_ЗапросНедостающихДанных
		|ГДЕ
		|	ВходящийИдентификатор = &ВходящийИдентификатор
		|	И КодОтправителя = &КодОтправителя
		|	И НЕ ДанныеПрочитаны";
	
	Запрос.УстановитьПараметр("ВходящийИдентификатор", ВходящийИдентификатор);
	Запрос.УстановитьПараметр("КодОтправителя", КодОтправителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Результат = Истина;
	КонецЕсли;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	


// Возвращает массив полей регистра
// 
// Возвращаемое значение:
//  Массив - Поля заполняемые при создании записи
//
Функция МассивПолейРегистра()
	
	МассивПолейРегистра = Новый Массив;  
	
	// Измерения
	МассивПолейРегистра.Добавить("Идентификатор");
	
	// Стандартные свойства сообщения
	МассивПолейРегистра.Добавить("ВходящийИдентификатор");
	МассивПолейРегистра.Добавить("КодОтправителя");
	
	// Параметры с информацией по обмену
    МассивПолейРегистра.Добавить("ДатаОтправки");
	МассивПолейРегистра.Добавить("ТипСообщения");
	МассивПолейРегистра.Добавить("ТипОбъекта");
	МассивПолейРегистра.Добавить("ИдОбъекта");
	МассивПолейРегистра.Добавить("Представление");
	
	// Отметка о прочтении
	МассивПолейРегистра.Добавить("ДанныеПрочитаны");
	МассивПолейРегистра.Добавить("ДатаЧтения"); 
	
	// Ошибка записи
	МассивПолейРегистра.Добавить("ТекстОшибки");
	
	Возврат МассивПолейРегистра;
	
КонецФункции

// Возвращает массив полей изменения регистра
// 
// Возвращаемое значение:
//  Массив - Поля заполняемые при создании записи 
//
Функция МассивПолейИзмененияРегистра()
	
	МассивПолейРегистра = Новый Массив;
	МассивПолейРегистра.Добавить("ДанныеПрочитаны");
	МассивПолейРегистра.Добавить("ДатаЧтения");
	
	МассивПолейРегистра.Добавить("ТекстОшибки");
	
	Возврат МассивПолейРегистра;
	
КонецФункции


#КонецОбласти