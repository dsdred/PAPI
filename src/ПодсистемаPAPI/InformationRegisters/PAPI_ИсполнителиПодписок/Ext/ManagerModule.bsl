#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавить запись
//
// Параметры:
//  ТипОбъекта	- Строка - Наименование источника подписки 
//  ТипСобытия	- ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие - Событие подписки
//  Подписка	- СправочникСсылка.PAPI_ПодпискиНаСобытия - Элемент справочника соподписки
//
Процедура ДобавитьЗапись(Знач ТипОбъекта, Знач ТипСобытия, Знач Подписка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипОбъекта) 
		Или НЕ ЗначениеЗаполнено(ТипСобытия) 
		Или НЕ ЗначениеЗаполнено(Подписка) Тогда
		Возврат;
	КонецЕсли;

	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	ИндексЗначенияТипаСобытий = Перечисления.PAPI_ТипПодпискиНаСобытие.Индекс(ТипСобытия);
	ИмяСобытия = Метаданные.Перечисления.PAPI_ТипПодпискиНаСобытие.ЗначенияПеречисления[ИндексЗначенияТипаСобытий].Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОтбораПодписокНаСобытие(); 			
	Запрос.УстановитьПараметр("Подписка", Подписка);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипВыполнения = Перечисления.PAPI_ТипВыполнения.Произвольный Тогда 				
			
			СтруктураНастройки = PAPI_ПодпискиНаСобытия.СтруктураНастроекПодписки(Выборка.Настройки);
			Если СтруктураНастройки.Свойство("СП_КодПодписки") 
				И Не ПустаяСтрока(СтруктураНастройки.СП_КодПодписки) Тогда
				
				ДобавитьОбновитьЗаписьРегистра(Выборка, СтруктураНастройки.СП_КодПодписки);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ТипВыполнения = Перечисления.PAPI_ТипВыполнения.Алгоритм Тогда
			
			ИсполняемыйКод = ИсполняемыйКодАлгоритма(Выборка.Алгоритм);
			Если ЗначениеЗаполнено(ИсполняемыйКод) Тогда
				ДобавитьОбновитьЗаписьРегистра(Выборка, ИсполняемыйКод);
			КонецЕсли;			
												
		ИначеЕсли Выборка.ТипВыполнения = Перечисления.PAPI_ТипВыполнения.ВнешняяОбработка Тогда
			
			Если  Не ПустаяСтрока(Выборка.ИмяФайла) 
				И Не ПустаяСтрока(Выборка.Наименование) Тогда   
				
				ВыполняемаяПроцедура = Выборка.Наименование;									
				ИсполняемыйКод = PAPI_РаботаСВнешнимиОбработками.ПолучитьИсходныйКодВнешнейОбработки(
								Выборка.ИмяФайла, ВыполняемаяПроцедура, Выборка.БезопасныйРежим); 						
						 
				ДобавитьОбновитьЗаписьРегистра(Выборка, ИсполняемыйКод);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
КонецПроцедуры

// Очистить записи по измерениям
//
// Параметры:
//  ТипОбъекта	- Строка - Наименование источника подписки 
//  ТипСобытия	- ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие - Событие подписки
//  Подписка	 - СравочникСсылка.PAPI_ПодпискиНаСобытия - Описание подписки на событие
//
Процедура ОчиститьЗаписиПоИзмерениям(Знач ТипОбъекта, Знач ТипСобытия, Знач Подписка) Экспорт
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	ТипОбъекта = МетаИмяОбъекта(ТипОбъекта);
	Набор = РегистрыСведений.PAPI_ИсполнителиПодписок.СоздатьНаборЗаписей();
	Набор.Отбор.ТипОбъекта.Установить(ТипОбъекта);
	Набор.Отбор.ТипСобытия.Установить(ТипСобытия);
	Набор.Отбор.Подписка.Установить(Подписка);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Набор.Очистить();
		Набор.Записать(Истина);
	КонецЕсли;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

// Удалить все исполнители
//
// Параметры:
//  Подписка - СравочникСсылка.PAPI_ПодпискиНаСобытия - Описание подписки на событие
//
Процедура УдалитьВсеИсполнители(Знач Подписка) Экспорт
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.PAPI_ИсполнителиПодписок КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Подписка = &Подписка
	|");
	Запрос.УстановитьПараметр("Подписка", Подписка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.PAPI_ИсполнителиПодписок.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры


// Обновить записи для алгоритма
//
// Параметры:
//  АлгоритмСсылка - СправочникСсылка.PAPI_Алгоритмы - Алгоритм используемый в подписках
//
Процедура ОбновитьЗаписиДляАлгоритма(АлгоритмСсылка) Экспорт
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	PAPI_ИсполнителиПодписок.ТипОбъекта КАК ТипОбъекта,
	|	PAPI_ИсполнителиПодписок.ТипСобытия КАК ТипСобытия,
	|	PAPI_ИсполнителиПодписок.Подписка КАК Подписка
	|ИЗ
	|	РегистрСведений.PAPI_ИсполнителиПодписок КАК PAPI_ИсполнителиПодписок
	|ГДЕ
	|	PAPI_ИсполнителиПодписок.Алгоритм = &АлгоритмСсылка";	
	Запрос.УстановитьПараметр("АлгоритмСсылка", АлгоритмСсылка);
	ОбновитьЗаписиПоВыборкеИзмерений(Запрос);

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

// Обновить записи для внешней обработки
//
// Параметры:
//  ВнешняяОбработкаСсылка - СправочникСсылка.PAPI_ВнешняяОбработка - Внешняя обработка используемая в подписках
//
Процедура ОбновитьЗаписиДляВнешнейОбработки(ВнешняяОбработкаСсылка) Экспорт
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	PAPI_ИсполнителиПодписок.ТипОбъекта КАК ТипОбъекта,
	|	PAPI_ИсполнителиПодписок.ТипСобытия КАК ТипСобытия,
	|	PAPI_ИсполнителиПодписок.Подписка КАК Подписка
	|ИЗ
	|	РегистрСведений.PAPI_ИсполнителиПодписок КАК PAPI_ИсполнителиПодписок
	|ГДЕ
	|	PAPI_ИсполнителиПодписок.ВнешняяОбработка = &ВнешняяОбработка";	
	Запрос.УстановитьПараметр("ВнешняяОбработка", ВнешняяОбработкаСсылка);
	ОбновитьЗаписиПоВыборкеИзмерений(Запрос);

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновить записи по выборке измерений
//
// Параметры:
//  ЗапросВыборкиИзмерений	 - Запрос - См.ОбновитьЗаписиДляВнешнейОбработки и ОбновитьЗаписиДляАлгоритма
//
Процедура ОбновитьЗаписиПоВыборкеИзмерений(ЗапросВыборкиИзмерений)

	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	Выборка = ЗапросВыборкиИзмерений.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьЗаписиПоИзмерениям(Выборка.ТипОбъекта, Выборка.ТипСобытия, Выборка.Подписка);
		ДобавитьЗапись(Выборка.ТипОбъекта, Выборка.ТипСобытия, Выборка.Подписка);
	КонецЦикла;

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

// Исполняемый код алгоритма
//
// Параметры:
//  АлгоритмСсылка - СправочникСсылка.PAPI_Алгоритмы - Алгоритм используемый в подписках 
// 
// Возвращаемое значение:
//  Строка - исполняемый код подписки
//
Функция ИсполняемыйКодАлгоритма(АлгоритмСсылка)

	ТекстКода = "";
	
	Если НЕ ЗначениеЗаполнено(АлгоритмСсылка)
			Или НЕ АлгоритмСсылка.Разрешен	Тогда
		Возврат ТекстКода;
	КонецЕсли;
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	СтруктураНастройки = PAPI_РаботаСАлгоритмами.СтруктураНастроекАлгоритма(АлгоритмСсылка.Настройки);	
	
	
	Если СтруктураНастройки.Свойство("СА_КодАлгоритма") Тогда
				  
		Если СтруктураНастройки.Свойство("СА_ПараметрыАлгоритма") 
			И СтруктураНастройки.СА_ПараметрыАлгоритма.Количество() > 0 Тогда
			
			// TODO: Сделать конвертацию алгоритма с параметами 
			//	в алгоритм без параметров поместив все в исполняемый код.
			ВызватьИсключение "В подписчиках на события не поддерживаются алгоритмы с параметрами"; 
						
		КонецЕсли;		
		ТекстКода = СтруктураНастройки.СА_КодАлгоритма;		
	КонецЕсли;	

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
	Возврат ТекстКода; 
	
КонецФункции

// Добавить обновить запись регистра
//
// Параметры:
//  ДанныеПодписки	 - Выборка - См. ДобавитьЗапись 
//  ИсполняемыйКод	 - Строка - исполняемый код подписки
//
Процедура ДобавитьОбновитьЗаписьРегистра(ДанныеПодписки, ИсполняемыйКод)
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	ТипОбъекта = МетаИмяОбъекта(ДанныеПодписки.Источник);
	Набор = РегистрыСведений.PAPI_ИсполнителиПодписок.СоздатьНаборЗаписей();
	Набор.Отбор.ТипОбъекта.Установить(ТипОбъекта);
	Набор.Отбор.ТипСобытия.Установить(ДанныеПодписки.Событие);
	Набор.Отбор.Подписка.Установить(ДанныеПодписки.Подписка);
	
	Запись = Набор.Добавить();
	Запись.ТипОбъекта = ТипОбъекта;
	Запись.ТипСобытия = ДанныеПодписки.Событие;
	Запись.Подписка = ДанныеПодписки.Подписка;
	Запись.ТипВыполнения = ДанныеПодписки.ТипВыполнения;
	Запись.Алгоритм = ДанныеПодписки.Алгоритм;
	Запись.Приоритет = ДанныеПодписки.Приоритет;
	Запись.ВнешняяОбработка = ДанныеПодписки.ВнешняяОбработка;
	Запись.ИсполняемыйКод = ДополнитьАлгоритмПараметрамиПодписки(
									ИсполняемыйКод,
									Запись.ТипОбъекта,
									Запись.ТипСобытия,
									Запись.ТипВыполнения
	);	
	
	Набор.Записать(Истина);
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

// Дополнить алгоритм параметрами подписки
//
// Параметры:
//  ИсполняемыйКод	 - Строка - Исполняемый код подписки
//  ТипОбъекта	- Строка - Наименование источника подписки 
//  ТипСобытия	- ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие - Событие подписки
//  ТипВыполнения	- ПеречислениеСсылка.PAPI_ТипВыполнения - вариант исполнения подписки
// 
// Возвращаемое значение:
//  Строка - Исполняемый код подписки с параметрами
//
Функция ДополнитьАлгоритмПараметрамиПодписки(Знач ИсполняемыйКод, Знач ТипОбъекта, Знач ТипСобытия, Знач ТипВыполнения)
	
	ТекстУстановкиПараметров = "// Установка параметров";
	ТекстВозвратаПараметров = "// Возврат значений параметров";
	ВсеИменаПараметров = PAPI_ПодпискиНаСобытия.ИменаПараметровОбработчиков(ТипОбъекта, ТипСобытия);
	Для Каждого ИмяПараметра Из ВсеИменаПараметров Цикл
		ТекстУстановкиПараметров  = ТекстУстановкиПараметров  + Символы.ПС 
			+ ИмяПараметра + " = _Параметры_." + ИмяПараметра + ";"
		;		
		ТекстВозвратаПараметров = ТекстВозвратаПараметров + Символы.ПС
			+ "_Параметры_." + ИмяПараметра + " = " + ИмяПараметра + ";"
		;
	КонецЦикла;
	ТекстУстановкиПараметров  = ТекстУстановкиПараметров  + Символы.ПС + "// Основной код: " + Символы.ПС;
	
	// Если указана скобка, значит это скорее всего процедура описанная во внешней обаботке.
	// В любом случае без ";" произойдет ошибка. Ниже остается проверить, что это внешнаяя обработка 
	// и если это так, тогда она уже содержит параметры
	ПараметрыНужны = Истина;
	Если Прав(СокрЛП(ИсполняемыйКод),1) = ")" Тогда 
		ИсполняемыйКод = СокрЛП(ИсполняемыйКод) + ";";
		ПараметрыНужны = Ложь;
	КонецЕсли;	
	
	ПолныйКод = ТекстУстановкиПараметров + ИсполняемыйКод;  
	Если ТипВыполнения = Перечисления.PAPI_ТипВыполнения.ВнешняяОбработка И ПараметрыНужны Тогда				
		ПолныйКод  = ПолныйКод  + "(" + СтрСоединить(ВсеИменаПараметров, ", ") + ");"; 	
	КонецЕсли;
	ПолныйКод  = ПолныйКод  + Символы.ПС + ТекстВозвратаПараметров;
	
	Возврат ПолныйКод;
	
КонецФункции

// Мета имя объекта
//
// Параметры:
//  ТипОбъекта	 - Строка - Например: "ДокументОбъект"
// 
// Возвращаемое значение:
//  Строка - Преобразованный тип. Например: "Документ."
//
Функция МетаИмяОбъекта(ТипОбъекта)
	МетаТипОбъекта = ТипОбъекта;
	
	Если СтрНайти(МетаТипОбъекта,".") = 0 Тогда 
		РазделительТипа = "";
	Иначе	
		РазделительТипа = ".";
	КонецЕсли;	
	
	МетаТипОбъекта = СтрЗаменить(МетаТипОбъекта, "Объект"			+ РазделительТипа, ".");
	МетаТипОбъекта = СтрЗаменить(МетаТипОбъекта, "НаборЗаписей"		+ РазделительТипа, ".");
	МетаТипОбъекта = СтрЗаменить(МетаТипОбъекта, "МенеджерЗначения" + РазделительТипа, ".");
	МетаТипОбъекта = СтрЗаменить(МетаТипОбъекта, "Менеджер"			+ РазделительТипа, ".");
	
	Возврат МетаТипОбъекта;
КонецФункции

// Текст запроса отбора подписок на событие
// 
// Возвращаемое значение:
//   Строка - текст запроса 
//
Функция ТекстЗапросаОтбораПодписокНаСобытие()
	
	Результат =
		"ВЫБРАТЬ
		|	PAPI_ПодпискиНаСобытия.Ссылка КАК Подписка,
		|	PAPI_ПодпискиНаСобытия.Алгоритм КАК Алгоритм,
		|	PAPI_ПодпискиНаСобытия.ВнешняяОбработка КАК ВнешняяОбработка,
		|	PAPI_ПодпискиНаСобытия.ТипВыполнения КАК ТипВыполнения,
		|	PAPI_ПодпискиНаСобытия.Событие КАК Событие,
		|	PAPI_ПодпискиНаСобытия.Приоритет КАК Приоритет,
		|	PAPI_ПодпискиНаСобытия.Настройки КАК Настройки,
		|	PAPI_ПодпискиНаСобытияИсточники.Источник КАК Источник,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.Ссылка.ПолноеИмяФайла, """") КАК ИмяФайла,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.ИсполняемыйТип, """") КАК ИсполняемыйТип,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.Ссылка.БезопасныйРежим, ИСТИНА) КАК БезопасныйРежим
		|ИЗ
		|	Справочник.PAPI_ПодпискиНаСобытия КАК PAPI_ПодпискиНаСобытия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.PAPI_ПодпискиНаСобытия.Источники КАК PAPI_ПодпискиНаСобытияИсточники
		|		ПО (PAPI_ПодпискиНаСобытияИсточники.Ссылка = PAPI_ПодпискиНаСобытия.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.PAPI_ВнешняяОбработка.Команды КАК КомандыВнешнейОбработки
		|		ПО PAPI_ПодпискиНаСобытия.ВнешняяОбработка = КомандыВнешнейОбработки.Ссылка
		|			И (PAPI_ПодпискиНаСобытияИсточники.РодительИсточника = КомандыВнешнейОбработки.Источник)
		|			И PAPI_ПодпискиНаСобытия.Событие = КомандыВнешнейОбработки.Событие
		|ГДЕ
		|	НЕ PAPI_ПодпискиНаСобытия.ПометкаУдаления
		|	И PAPI_ПодпискиНаСобытия.Разрешен
		|	И PAPI_ПодпискиНаСобытия.Ссылка = &Подписка
		|	И PAPI_ПодпискиНаСобытияИсточники.Подписка = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	PAPI_ПодпискиНаСобытия.Приоритет";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли