 
#Область ОбъявлениеПеременных

&НаСервере
Перем ОбработкаНастройкиСоставаИС; 

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаНастройкиСоставаИС = Обработки.PAPI_НастройкаСоставаИсторииДанных.Создать();    
	
	// Проверка пригодности платформы
	СтруктураПроверки = ОбработкаНастройкиСоставаИС.ТекущаяВерсияПлатформы();
	Если СтруктураПроверки.Отработал Тогда 
		ЕстьОшибка 		= Ложь;
		ВерсияПлатформы = СтруктураПроверки.Результат;
	Иначе 
		ЕстьОшибка 	= Истина;
		ТекстОшибки = СтруктураПроверки.ТекстОшибки;
	КонецЕсли;	
	
	ВключенныеИД = Истина;
		
	СписокСрокиХраненияВерсий = Перечисления.PAPI_СрокиХранения.ВсеЗначенияСписком();	
	
    ЗагрузитьМетаданныеВДеревоМетаданных();
	
	Если ВключенныеИД Тогда 
		ВключенныеИДПриИзмененииНаСервере();	
	КонецЕсли;	     
	
	Элементы.Расписание.Заголовок = ТекущееРасписание();
	АвтоматическиУдалятьУстаревшиеВерсии = АвтоматическаяОчисткаВключена();
	Элементы.Расписание.Доступность = АвтоматическиУдалятьУстаревшиеВерсии;
	Элементы.НастроитьРасписание.Доступность = АвтоматическиУдалятьУстаревшиеВерсии;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключенныеИДПриИзменении(Элемент)
	ВключенныеИДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВключенныеИДПриИзмененииНаСервере()
	
	Если УсловноеОформление.Элементы.Количество() > 0 Тогда 
		УсловноеОформление.Элементы.Очистить();
	КонецЕсли;
	
	Если ВключенныеИД Тогда 
		
		ДеревоМетаданных.ПолучитьЭлементы();
			
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();	
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			
		ЭлементОтбора 				= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМетаданных.ИсторияВключена");
		ЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение= Ложь;
			
		// Оформляемые поля		
		Для Каждого КолонкаДерева Из Элементы.ДеревоМетаданных.ПодчиненныеЭлементы Цикл
			ОформляемоеПоле 	= ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле= Новый ПолеКомпоновкиДанных(КолонкаДерева.Имя);
		КонецЦикла;
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ДеревоМетаданных.ПолучитьЭлементы().Очистить();

    ЗагрузитьМетаданныеВДеревоМетаданных();
	
КонецПроцедуры

#КонецОбласти

#Область МенюУстановитьСрокХраненияИстории
&НаКлиенте
Процедура Бессрочно(Команда)   
		
	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.Бессрочно"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;				
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаДень(Команда)

	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ЗаДень"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаНеделю(Команда)

	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ЗаНеделю"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаМесяц(Команда)
	
	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ЗаМесяц"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаТриМесяца(Команда)
	
	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ЗаТриМесяца"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаШестьМесяцев(Команда)
	
	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ЗаШестьМесяцев"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаГод(Команда)
	
	УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(
		ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ЗаГод"));   
		
	Если СписокОшибок.Количество() > 0 Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		Отказ = Истина; 
	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхСрокХраненияПриИзменении(Элемент)
	
	СписокОшибок.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;  
	Если ТекущиеДанные <> Неопределено Тогда 
		ВерхнийУровеньДерева = ТекущиеДанные.ПолучитьРодителя();
		
		Если ВерхнийУровеньДерева <> Неопределено Тогда
            ТекстСообщения = "";
			Если ТекущиеДанные.СрокХранения = ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.Бессрочно")
				Или ТекущиеДанные.СрокХранения = ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ПустаяСсылка") Тогда  
				
				// Удаляем из РегистраСведений.PAPI_НастройкиХраненияИстории	
				Попытка
					УдалитьДанныеВРегистрНастройкиХраненияИстории(ВерхнийУровеньДерева.Синоним, ТекущиеДанные.Имя);
				Исключение
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки;
				
			Иначе
				
				// Добавляем/обновляем из РегистраСведений.PAPI_НастройкиХраненияИстории
				СтруктураЗаписиРегистра = Новый Структура;
				СтруктураЗаписиРегистра.Вставить("ТипДанных",	ВерхнийУровеньДерева.Синоним);
				СтруктураЗаписиРегистра.Вставить("ИмяОбъекта", 	ТекущиеДанные.Имя);
				СтруктураЗаписиРегистра.Вставить("СрокХранения",ТекущиеДанные.СрокХранения);
				
				ТекстСообщения = ЗаписатьДанныеВРегистрНастройкиХраненияИстории(СтруктураЗаписиРегистра);
									
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстСообщения) Тогда 
				
				ТекстСообщения = ВерхнийУровеньДерева.Синоним + "." + ТекущиеДанные.Имя + ": " + ТекстСообщения;	
				//ПоказатьПредупреждение(, ТекстПредупреждения);
			    СписокОшибок.Добавить(ТекстСообщения);
				
			КонецЕсли;  
			
			Если СписокОшибок.Количество() > 0 Тогда 
				
				СоответствиеХранимыхОбъектов = СоответствиеХранимыхОбъектовИзРегистра(ВерхнийУровеньДерева.Синоним, ТекущиеДанные.Имя);
				
				ТекущееПолноеИмя = ВерхнийУровеньДерева.Синоним + "." + ТекущиеДанные.Имя;
				ТекущееСрокХранения = СоответствиеХранимыхОбъектов[ТекущееПолноеИмя];
				Если ТекущееСрокХранения <> Неопределено Тогда 
					ТекущиеДанные.СрокХранения = ТекущееСрокХранения;	
				Иначе	
					ТекущиеДанные.СрокХранения = ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.Бессрочно");                     
				КонецЕсли;
				
				
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
				
			КонецЕсли;
           			
		КонецЕсли;			
	КонецЕсли;
	
	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура АвтоматическиУдалятьУстаревшиеВерсииПриИзменении(Элемент)
	УстановитьПараметрРегламентногоЗадания("Использование", АвтоматическиУдалятьУстаревшиеВерсии);
	Элементы.Расписание.Доступность = АвтоматическиУдалятьУстаревшиеВерсии;
	Элементы.НастроитьРасписание.Доступность = АвтоматическиУдалятьУстаревшиеВерсии;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание());
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОчистку(Команда)
	РезультатЗадание = ВыполнитьОчисткуНаСервере(); 
	Если СписокОшибок.Количество() > 0 Тогда 
		СписокОшибок.Очистить();	
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатЗадание.ТекстОшибки) Тогда  	
		СписокОшибок.Добавить(РезультатЗадание.ТекстОшибки); 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибки;	
	КонецЕсли;	
	
	Если Не ПустаяСтрока(РезультатЗадание.Сообщение) Тогда
		ОчиститьСообщения();
		PAPI_ОбщегоНазначенияКлиентСервер.КраткоеСообщениеПользователю(РезультатЗадание.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьОчисткуНаСервере() 
	
	Результат = Новый Структура("Отработал, ТекстОшибки, Сообщение", Истина, "", "");
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	ИмяВыполняемогоМетода = "PAPI_ИсторияДанных.ИсторияДанныхУдалитьВерсииНаСервере";
	ФильтрОтбора = Новый Структура;
	ФильтрОтбора.Вставить("ИмяМетода", ИмяВыполняемогоМетода);   
	
	РезультатЗадание = PAPI_ОбщегоНазначенияВызовСервера.НайтиФоновоеЗаданиеПоФильтрОтбора(ФильтрОтбора);	
	ТекстОшибки = "";
	Если Не ПустаяСтрока(РезультатЗадание.ТекстОшибки) Тогда 

		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка",
			Перечисления.PAPI_ТипЛога.Ошибка, 
			РезультатЗадание.ТекстОшибки, 
			СтрШаблон("ИмяМетода: %1", ИмяВыполняемогоМетода));
			
		Результат.ТекстОшибки = РезультатЗадание.ТекстОшибки;	
		
	КонецЕсли;
		
	Если РезультатЗадание.Выполняется Тогда 
		
		Результат.Сообщение = "Задание ""История данных удалить версии"" выполняется...";	
		Результат.Отработал	= Ложь;
	
	Иначе
		
		Результат.Сообщение = "Задание ""История данных удалить версии"" запущено...";		
		Результат.Отработал	= Истина;  
		
		// Запускаем задание История данных удалить версии
		ФоновыеЗадания.Выполнить("PAPI_ИсторияДанных.ИсторияДанныхУдалитьВерсииНаСервере");	
	
	КонецЕсли;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
	Возврат Результат; 
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьМетаданныеВДеревоМетаданных()
	
	Если ОбработкаНастройкиСоставаИС = Неопределено Тогда 
		ОбработкаНастройкиСоставаИС = Обработки.PAPI_НастройкаСоставаИсторииДанных.Создать();
	КонецЕсли;
	
	Элементы.ТекстОшибки.Видимость = ЕстьОшибка;
	Если Не ЕстьОшибка Тогда
		
		// Получаем список объектов используемых в истории данных
		СписокОбъектовИИ = ОбработкаНастройкиСоставаИС.СписокОбъектовМетаданных(ВерсияПлатформы);
		
		// Используется история изменений. Применяется при построении первоначального дерева.
		ИспользованиеИсторииДанныхВключено = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать;   
			
		// Структура дерева
		перСписокМетаданных = ДеревоМетаданных.ПолучитьЭлементы(); 
		Для Каждого СтрокаСпискаОбъектов Из СписокОбъектовИИ Цикл 
				
			ВерхнийУровеньДерева 					= перСписокМетаданных.Добавить();
			ВерхнийУровеньДерева.Имя				= СтрокаСпискаОбъектов.Значение.ИмяОбъекта;
			ВерхнийУровеньДерева.Синоним            = СтрокаСпискаОбъектов.Значение.ИмяОбъекта;
			ВерхнийУровеньДерева.ПолноеИмя			= "";	
			ВерхнийУровеньДерева.ИндексКартинки     = СтрокаСпискаОбъектов.Значение.НомерКартинки;
			
			ВерхнийУровеньДерева.СрокХранения 		= Перечисления.PAPI_СрокиХранения.ПустаяСсылка();
						
			текВерхнийУровеньДерева = ВерхнийУровеньДерева.ПолучитьЭлементы();
			
			СоответствиеХранимыхОбъектов = СоответствиеХранимыхОбъектовИзРегистра(ВерхнийУровеньДерева.Синоним);
			
			ВерхнийУровеньДереваИсторияВключена = Ложь;
			Для Каждого ОбъектМетаданных Из Метаданные[ВерхнийУровеньДерева.Имя] Цикл
							 
				ПодчиненныйУровеньДерева			= текВерхнийУровеньДерева.Добавить();
				ПодчиненныйУровеньДерева.Имя		= ОбъектМетаданных.Имя;
				ПодчиненныйУровеньДерева.Синоним    = ?(НЕ ПустаяСтрока(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
				ПодчиненныйУровеньДерева.ПолноеИмя 	= ВерхнийУровеньДерева.Имя + "." + ОбъектМетаданных.Имя;				
				ПодчиненныйУровеньДерева.ИндексКартинки = ВерхнийУровеньДерева.ИндексКартинки;	
					
				ТекущееСрокХранения = СоответствиеХранимыхОбъектов[ПодчиненныйУровеньДерева.ПолноеИмя];
				Если ТекущееСрокХранения <> Неопределено Тогда 
					ПодчиненныйУровеньДерева.СрокХранения = ТекущееСрокХранения;	
				Иначе	
					ПодчиненныйУровеньДерева.СрокХранения = Перечисления.PAPI_СрокиХранения.Бессрочно;                     
				КонецЕсли;
				
				перИсторияВключена  = PAPI_ИсторияДанных.ИсторияДанныхВключена(ВерхнийУровеньДерева.Имя, ОбъектМетаданных.Имя);
		        ПодчиненныйУровеньДерева.ИсторияВключена  = перИсторияВключена;
				
				Если Не ВерхнийУровеньДереваИсторияВключена И перИсторияВключена Тогда 
					ВерхнийУровеньДереваИсторияВключена = Истина;	
				КонецЕсли;	
				
			КонецЦикла;
			
			ВерхнийУровеньДерева.ИсторияВключена = ВерхнийУровеньДереваИсторияВключена;

		КонецЦикла;  
		
		Элементы.ДеревоМетаданныхСрокХранения.СписокВыбора.ЗагрузитьЗначения(СписокСрокиХраненияВерсий.ВыгрузитьЗначения());
		
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СоответствиеХранимыхОбъектовИзРегистра(ТипДанных, ИмяОбъекта="")

	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PAPI_НастройкиХраненияИстории.ТипДанных КАК ТипДанных,
		|	PAPI_НастройкиХраненияИстории.ИмяОбъекта КАК ИмяОбъекта,
		|	PAPI_НастройкиХраненияИстории.СрокХранения КАК СрокХранения
		|ИЗ
		|	РегистрСведений.PAPI_НастройкиХраненияИстории КАК PAPI_НастройкиХраненияИстории
		|ГДЕ
		|	PAPI_НастройкиХраненияИстории.ТипДанных = &ТипДанных";	
	
	
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	
	Если Не ПустаяСтрока(ИмяОбъекта) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "	И PAPI_НастройкиХраненияИстории.ИмяОбъекта = &ИмяОбъекта";
		Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта); 
	КонецЕсли;	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(ВыборкаДетальныеЗаписи.ТипДанных + "." + ВыборкаДетальныеЗаписи.ИмяОбъекта, ВыборкаДетальныеЗаписи.СрокХранения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Процедура УстановитьСрокХраненияИсторииДляВыбранныхОбъектов(СрокХраненияИстории)
	
	СписокОшибок.Очистить();
	
	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоМетаданных.ВыделенныеСтроки Цикл
		ЭлементДерева = ДеревоМетаданных.НайтиПоИдентификатору(ИдентификаторСтроки); 
		ВерхнийУровеньДерева = ЭлементДерева.ПолучитьРодителя();	
		Если ВерхнийУровеньДерева = Неопределено Тогда
			Для Каждого ПодчиненныйЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
				УстановитьСрокХраненияИсторииДляВыбранногоОбъекта(ПодчиненныйЭлементДерева, ЭлементДерева.Имя, СрокХраненияИстории);
			КонецЦикла;
		Иначе
			УстановитьСрокХраненияИсторииДляВыбранногоОбъекта(ЭлементДерева,ВерхнийУровеньДерева.Имя, СрокХраненияИстории);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокХраненияИсторииДляВыбранногоОбъекта(ТекущиеДанные, ТипДанных, СрокХраненияИстории)
	
	// Пока сделал чтобы при включенном отборе срок хранения меняется только по тем объектам которые видны.
	Если ВключенныеИД
		И Не ТекущиеДанные.ИсторияВключена Тогда 
		
		
		
	Иначе
			
		Если СрокХраненияИстории = ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.Бессрочно")
			Или СрокХраненияИстории = ПредопределенноеЗначение("Перечисление.PAPI_СрокиХранения.ПустаяСсылка") Тогда  
					
			// Удаляем из РегистраСведений.PAPI_НастройкиХраненияИстории	
			Попытка
				
				ТекущиеДанные.СрокХранения = СрокХраненияИстории;
				УдалитьДанныеВРегистрНастройкиХраненияИстории(ТипДанных, ТекущиеДанные.Имя);
				
			Исключение    
				
				ТекстСообщения = ТипДанных + "." + ТекущиеДанные.Имя + ": " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()); 
				СписокОшибок.Добавить(ТекстСообщения);   
				
			КонецПопытки;
						
		Иначе
					
			// Добавляем/обновляем из РегистраСведений.PAPI_НастройкиХраненияИстории
			СтруктураЗаписиРегистра = Новый Структура;
			СтруктураЗаписиРегистра.Вставить("ТипДанных",	ТипДанных);
			СтруктураЗаписиРегистра.Вставить("ИмяОбъекта", 	ТекущиеДанные.Имя);
			СтруктураЗаписиРегистра.Вставить("СрокХранения",СрокХраненияИстории);
			
			ТекстСообщения = ЗаписатьДанныеВРегистрНастройкиХраненияИстории(СтруктураЗаписиРегистра); 
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ТекстСообщения = ТипДанных + "." + ТекущиеДанные.Имя + ": " + ТекстСообщения;
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ТекущиеДанные.СрокХранения = СрокХраненияИстории;
			КонецЕсли;
			
		КонецЕсли;  
	КонецЕсли;	
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьДанныеВРегистрНастройкиХраненияИстории(СтруктураЗаписиРегистра)
	Возврат РегистрыСведений.PAPI_НастройкиХраненияИстории.ДобавитьИзменитьЗапись(СтруктураЗаписиРегистра);	
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьДанныеВРегистрНастройкиХраненияИстории(ТипДанных, ИмяОбъекта)
	РегистрыСведений.PAPI_НастройкиХраненияИстории.УдалитьЗаписьРегистра(ТипДанных, ИмяОбъекта);	
КонецПроцедуры	


#Область РасписаниеОчисткиВерсий

&НаСервере
Функция ТекущееРасписание()
	Возврат ПолучитьПараметрРегламентногоЗадания("Расписание", Новый РасписаниеРегламентногоЗадания);
КонецФункции 

&НаСервере
Функция АвтоматическаяОчисткаВключена()
	Возврат ПолучитьПараметрРегламентногоЗадания("Использование", Ложь);
КонецФункции

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПоУмолчанию)
	
	ПараметрыЗадания = Новый Структура;
    ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.PAPI_ИсторияДанныхУдалитьВерсии);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПараметрыЗадания);
	Для Каждого Задание Из СписокЗаданий Цикл
		Возврат Задание[ИмяПараметра];
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию; 
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра) 
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.PAPI_ИсторияДанныхУдалитьВерсии);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.PAPI_ИсторияДанныхУдалитьВерсии);
		Задание = PAPI_ОбщегоНазначенияВызовСервера.ДобавитьРегламентноеЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл 
			Идентификатор = PAPI_ОбщегоНазначенияВызовСервера.УточненныйИдентификаторЗадания(Задание);  	
			PAPI_ОбщегоНазначенияВызовСервера.ИзменитьРегламентноеЗадание(Идентификатор, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт 
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьПараметрРегламентногоЗадания("Расписание", Расписание);
	Элементы.Расписание.Заголовок = Расписание;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

