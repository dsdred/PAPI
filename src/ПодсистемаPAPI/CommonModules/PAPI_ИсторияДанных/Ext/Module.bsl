#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область ФоновыеЗадания

// Выполнить обновление истории данных
// Регламентное задание "PAPI_ИсторияДанныхОбновитьИсторию"
//
Процедура ОбновитьИсториюНаСервере() Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	// Заполнение PAPI_Настройки на закладке "История данных"
	ВыполнитьОбработкуПослеЗаписиВерсий 	= PAPI_ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстантыЕслиВозможно("PAPI_ВыполнитьОбработкуПослеЗаписиВерсий", Ложь);
	АвтоУдалениеИзОбработкиПослеЗаписиВерсий= PAPI_ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстантыЕслиВозможно("PAPI_АвтоУдалениеИзОбработкиПослеЗаписиВерсий", Ложь);
	
	ИсторияДанных.ОбновитьИсторию(ВыполнитьОбработкуПослеЗаписиВерсий, АвтоУдалениеИзОбработкиПослеЗаписиВерсий); 
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры

// Выполнить обработку после записи версий на сервере
// Регламентное задание "PAPI_ИсторияДанныхВыполнитьОбработкуПослеЗаписиВерсий"
//
Процедура ВыполнитьОбработкуПослеЗаписиВерсийНаСервере() Экспорт 	
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	   
	ИсторияДанных.ВыполнитьОбработкуПослеЗаписиВерсий();
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
КонецПроцедуры	

// Выполнить обработку после записи версий на сервере
// Регламентное задание "PAPI_ИсторияДанныхУдалитьВерсии"
//
Процедура ИсторияДанныхУдалитьВерсииНаСервере() Экспорт 	
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	// TODO: Добавить настройку с выбором несколько потоков
	ВыполнитьОчисткуИсторииДанныхВОдинПоток();
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

// Удалить из обработки после записи версий
//
// Параметры:
//  Данные			 - ЛюбаяСсылка - Данные, по которым удаляется версия 
//  ВерсияУдаления	 - Число, Массив - По какую версию удаляем из обработки после записи версий 
//
Процедура УдалитьИзОбработкиПослеЗаписиВерсий(Данные, ВерсияУдаления = Неопределено) Экспорт
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	// Удаляем из "Пост обработки" [_DataHistoryAfterWriteQueue]    
	Если ТипЗнч(ВерсияУдаления) = Тип("Число") Тогда 
		
		МассивВерсий = Новый Массив;
		МассивВерсий.Добавить(ВерсияУдаления);     
		
	ИначеЕсли ТипЗнч(ВерсияУдаления) = Тип("Массив") Тогда 
		
		МассивВерсий = ВерсияУдаления;
		
	Иначе 
		
		МассивВерсий = Новый Массив;
		МассивВерсий.Добавить(Неопределено);
		
	КонецЕсли;	
	
	Для Каждого ЭлМассива Из МассивВерсий Цикл 	
		ИсторияДанных.УдалитьИзОбработкиПослеЗаписиВерсий(Данные, ЭлМассива); 
	КонецЦикла;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
КонецПроцедуры	

// Включить\выключить обработку после записи версии
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого включается\выключается запись в очередь после записи объекта.
//  ВключитьОбработчик	 - Булево - Определяет, добавляется ли информация о записи версии в очередь обработки после записи. 
//	Очередь обрабатывается при вызове метода ВыполнитьОбработкуПослеЗаписиВерсий:
//		Истина - информация добавляется.
//		Ложь - информация не добавляется.
//
Процедура ВключитьОбработкуПослеЗаписиВерсии(Источник, ВключитьОбработчик = Истина) Экспорт 
	
	Источник.ЗаписьИсторииДанных.ВыполнятьОбработкуПослеЗаписиВерсии = ВключитьОбработчик;
	
КонецПроцедуры	     

// Включить\выключить Создать версию сразу после записи
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого включается\выключается запись в очередь после записи объекта.
//  ВключитьОбработчик	 - Булево - Определяет, добавляется ли информация о записи версии в очередь обработки после записи. 
//	Очередь обрабатывается при вызове метода ВыполнитьОбработкуПослеЗаписиВерсий:
//		Истина - информация добавляется.
//		Ложь - информация не добавляется.
//
Процедура ВключитьОбновлятьИсториюСразуПослеЗаписи(Источник, ВключитьОбработчик = Истина) Экспорт 
	
	Источник.ЗаписьИсторииДанных.ОбновлятьИсториюСразуПослеЗаписи = ВключитьОбработчик;
	
КонецПроцедуры


// Добавляет данные и представление данных в параметры записи истории данных.
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого добавляются дополнительные данные.
//  Имя				 - Строка - Имя добавляемого поля или табличной части.
//  Значение		 - Произвольный - Значение добавляемого поля или табличной части. 
//  Представление	 - Соответствие, Строка - Если передана строка, то представление, используемое по умолчанию. При отсутствии представления на необходимом языке, поведение отлично от конфигуратора, в котором нет возможности указать представление, используемое по умолчанию.
//		Если передано соответствие, то представления на различных языках, где:
//			Ключ - код языка,
//			Значение - представление.
//
Процедура ДобавитьДополнительныеДанные(Источник, Имя, Значение, Представление) Экспорт
	
    Источник.ЗаписьИсторииДанных.ДобавитьДополнительныеДанные(Имя, Значение, Представление);  
	
КонецПроцедуры

// Добавляет представление поля дополнительных данных в запись истории данных.
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого добавляется представление.
//  Имя			  - Строка - Имя добавляемого поля или табличной части
//  КодЯзыка	  - Строка - Код языка, на котором добавляется представление.
//  Представление - Строка - Представление на указанном языке.
//
Процедура ДобавитьПредставлениеПоляДополнительныхДанных(Источник, Имя, Представление, КодЯзыка = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда 
		Источник.ЗаписьИсторииДанных.ДобавитьПредставлениеПоляДополнительныхДанных(Имя, КодЯзыка, Представление);
	Иначе
		Источник.ЗаписьИсторииДанных.ДобавитьПредставлениеПоляДополнительныхДанных(Имя, Представление); 
	КонецЕсли;	   
	
КонецПроцедуры	


// Получить признак включена история данных или нет
//
// Параметры:
//  ТипДанных - Строка - Тип Метаданных. Пример: "Документы"
//	ИмяОбъекта- Строка - Имя объекта метаданных. Пример: "ПриобретениеТоваровУслуг" 
// 
// Возвращаемое значение:
//  Булево
//
Функция ИсторияДанныхВключена(Знач ТипДанных, Знач ИмяОбъекта) Экспорт 
	
	Результат = Ложь; 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипДанных) И ЗначениеЗаполнено(ИмяОбъекта) Тогда 
				
		Попытка
			
			текНастройки = ИсторияДанных.ПолучитьНастройки(Метаданные[ТипДанных][ИмяОбъекта]);
			
			Если текНастройки = Неопределено Тогда 

				ИспользованиеИсторииДанныхВключено = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать; 	
				Результат = ?(Метаданные[ТипДанных][ИмяОбъекта].ИсторияДанных = ИспользованиеИсторииДанныхВключено, Истина, Ложь);
				
			Иначе

				Результат = текНастройки.Использование; 
	
			КонецЕсли;
	
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "PAPI_ИсторияДанных.ИсторияДанныхВключена"); 
			
		КонецПопытки;	
		                                                                 
	КонецЕсли;
		
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	


// Выполнить очистку истории данных в один поток
//
Процедура ВыполнитьОчисткуИсторииДанныхВОдинПоток()
	
 	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	PAPI_СрокиХранения.Ссылка КАК СрокХранения,
		|	ВЫБОР
		|		КОГДА PAPI_СрокиХранения.Ссылка = ЗНАЧЕНИЕ(Перечисление.PAPI_СрокиХранения.ЗаДень)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -1)
		|		КОГДА PAPI_СрокиХранения.Ссылка = ЗНАЧЕНИЕ(Перечисление.PAPI_СрокиХранения.ЗаНеделю)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1)
		|		КОГДА PAPI_СрокиХранения.Ссылка = ЗНАЧЕНИЕ(Перечисление.PAPI_СрокиХранения.ЗаМесяц)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1)
		|		КОГДА PAPI_СрокиХранения.Ссылка = ЗНАЧЕНИЕ(Перечисление.PAPI_СрокиХранения.ЗаТриМесяца)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -3)
		|		КОГДА PAPI_СрокиХранения.Ссылка = ЗНАЧЕНИЕ(Перечисление.PAPI_СрокиХранения.ЗаШестьМесяцев)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -6)
		|		КОГДА PAPI_СрокиХранения.Ссылка = ЗНАЧЕНИЕ(Перечисление.PAPI_СрокиХранения.ЗаГод)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1)
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ДатаУдаления
		|ПОМЕСТИТЬ ВТ_СрокиХранения
		|ИЗ
		|	Перечисление.PAPI_СрокиХранения КАК PAPI_СрокиХранения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	PAPI_НастройкиХраненияИстории.ТипДанных КАК ТипДанных,
		|	PAPI_НастройкиХраненияИстории.ИмяОбъекта КАК ИмяОбъекта,
		|	ВТ_СрокиХранения.ДатаУдаления КАК ДатаУдаления
		|ИЗ
		|	РегистрСведений.PAPI_НастройкиХраненияИстории КАК PAPI_НастройкиХраненияИстории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрокиХранения КАК ВТ_СрокиХранения
		|		ПО PAPI_НастройкиХраненияИстории.СрокХранения = ВТ_СрокиХранения.СрокХранения
		|ГДЕ
		|	НЕ ВТ_СрокиХранения.ДатаУдаления ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаУдаления) Тогда 
			Продолжить;
		КонецЕсли;	
		
		УдалитьВерсии(ВыборкаДетальныеЗаписи.ТипДанных, 
					  ВыборкаДетальныеЗаписи.ИмяОбъекта, 
					  ВыборкаДетальныеЗаписи.ДатаУдаления);
	КонецЦикла;

КонецПроцедуры


#Область РаботаСВерсиями

// Произвести запись версии
//
// Параметры:
//  Данные 	 -  БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект,
//				РегистрСведенийНаборЗаписей,
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Объект конфигурации по которому будет создана версия  
//  ВидИзменения - Строка - "Добавление" или "Изменение" или "Удаление"
//	Комментарий - Строка - Текст с примечанием
//
Процедура ЗаписатьВерсию(Данные, ВидИзменения = "Изменение", Комментарий = "Версия записана вручную", ДатаСоздания = Неопределено) Экспорт  
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда 
		ДатаСоздания 	= ТекущаяДатаСеанса(); 
	КонецЕсли;
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();    

	Попытка 
		ИсторияДанных.ЗаписатьВерсию(
			Данные, 
			ДатаСоздания, 
			ТекущийПользователь.УникальныйИдентификатор, 
			ТекущийПользователь.Имя, 
			ТекущийПользователь.ПолноеИмя, 
			ВидИзмененияДанных[ВидИзменения], 
			Комментарий);   
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "PAPI_ИсторияДанных.ЗаписатьВерсиюПоСтруктуре");				
	КонецПопытки;	
	
КонецПроцедуры

// Произвести запись версии по параметрам
//
// Параметры:  
// 	ПараметрыЗаполнения - Структура:
//  	Данные 	 		-   БизнесПроцессОбъект, 
//							ПланВидовРасчетаОбъект, 
//							ПланСчетовОбъект, 
//							ПланВидовХарактеристикОбъект, 
//							ПланОбменаОбъект,
//							РегистрСведенийНаборЗаписей,
//							КонстантаМенеджерЗначения, 
//							СправочникОбъект, 
//							ЗадачаОбъект, 
//							ДокументОбъект - Объект конфигурации по которому будет создана версия  
//  	ВидИзменения 	- Строка - "Добавление" или "Изменение" или "Удаление"
//		Комментарий 	- Строка - Текст с примечанием
//      ДатаСоздания 	- Дата - Дата создания версии
//		Пользователь	- ПользовательИнформационнойБазы - Пользователь.УникальныйИдентификатор 
//		Транзакция		- Строка - Идентификатор транзакции версии.
//			Пример: "02.01.0001 0:21:41 (865831)"
//
Процедура ЗаписатьВерсиюПоСтруктуре(ПараметрыЗаполнения) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	ЗаписываемВерсию = Истина;
	
	Если ЗаписываемВерсию
		И ПараметрыЗаполнения.Свойство("Данные") Тогда 
		
		Данные = ПараметрыЗаполнения.Данные;  
		
	Иначе
		
		ЗаписываемВерсию = Ложь;
	
	КонецЕсли;
	
	Если ЗаписываемВерсию Тогда  
		
		ДатаСоздания = ?(ПараметрыЗаполнения.Свойство("ДатаСоздания"), ПараметрыЗаполнения.ДатаСоздания, ТекущаяДатаСеанса());
		Комментарий  = ?(ПараметрыЗаполнения.Свойство("Комментарий"), ПараметрыЗаполнения.Комментарий, "");
		
		Если ПараметрыЗаполнения.Свойство("Пользователь") Тогда 
		
			Пользователь = ПараметрыЗаполнения.Пользователь;
			Если ТипЗнч(Пользователь) <> Тип("ПользовательИнформационнойБазы") Тогда 
				Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь(); 	
			КонецЕсли;	
		
		Иначе
			
			Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь(); 		
		
		КонецЕсли;
		
		Если ПараметрыЗаполнения.Свойство("ВидИзменения") Тогда 
			Если ТипЗнч(ПараметрыЗаполнения.ВидИзменения) = Тип("Строка") Тогда 
				
				ВидИзменения = ПараметрыЗаполнения.ВидИзменения;	
				
			Иначе
				 
				ВидИзменения = "Изменение";
				
			КонецЕсли;	
			
		КонецЕсли;
			
		Попытка
			ИсторияДанных.ЗаписатьВерсию(
				Данные,
				ДатаСоздания,
				Пользователь.УникальныйИдентификатор, 
				Пользователь.Имя, 
				Пользователь.ПолноеИмя,				
				ВидИзмененияДанных[ВидИзменения], 
				Комментарий); 						
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "PAPI_ИсторияДанных.ЗаписатьВерсиюПоСтруктуре");				
		КонецПопытки; 
		
	Иначе
		
		ТекстОшибки = "Параметр ""Данные"" содержит недопустимое для создания версии значение";
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "PAPI_ИсторияДанных.ЗаписатьВерсиюПоСтруктуре");
		
	КонецЕсли;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
		
КонецПроцедуры

// Удалить версии истории данных
//
// Параметры:
//  ТипДанных 	- Строка - Тип Метаданных. Пример: "Документы"
//	ИмяОбъекта	- Строка - Имя объекта метаданных. Пример: "ПриобретениеТоваровУслуг"
//  ДатаУдаления- Дата - Дата по которую данные из истории данных будут удалены 
//
Процедура УдалитьВерсии(ТипДанных, ИмяОбъекта, ДатаУдаления) Экспорт  

	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	Попытка 
		
		ТипМетаданных = Метаданные[ТипДанных][ИмяОбъекта];
        ТипПолучен = Истина
		
	Исключение
		
		ТипПолучен = Ложь; 
		
	КонецПопытки;	
	
	Если ТипПолучен Тогда 
		Попытка                
			
			ИсторияДанных.УдалитьВерсии(ТипМетаданных, ДатаУдаления);		
		
		Исключение    
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			СообщениеОбОшибке = СтрШаблон("%1.%2: %3", ТипДанных, ИмяОбъекта, ТекстОшибки);
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, СообщениеОбОшибке, "PAPI_ИсторияДанных.УдалитьВерсии");	
				
		КонецПопытки;
	Иначе
		РегистрыСведений.PAPI_НастройкиХраненияИстории.УдалитьЗаписьРегистра(ТипДанных, ИмяОбъекта);	
	КонецЕсли;	
		
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти	



