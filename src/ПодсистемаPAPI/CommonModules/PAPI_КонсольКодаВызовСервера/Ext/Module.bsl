#Область КонсольКода

// Добавлена консоль кода Monaco https://github.com/salexdv/bsl_console 
// На основе разработки https://infostart.ru/1c/tools/1989363/

#КонецОбласти

Процедура ПолучитьМакетКонсоли(знач АдресМакета) Экспорт
	
	ДанныеИсходников = Обработки.PAPI_КонсольКода.ПолучитьМакет("src");
    ПоместитьВоВременноеХранилище(ДанныеИсходников, АдресМакета);
		
КонецПроцедуры

Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, знач РазделительПути) Экспорт
	
	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;
	
	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;
	
	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);
	
	Если Имена.Количество() = ЧастейМетаданных Тогда
		
		КаталогТипа = PAPI_КонсольКодаКлиентСервер.ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		
		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоллекциюОбщихМодулей() Экспорт
	
	КоллекцияОбщихМодулей = Новый Структура;
	КоллекцияОбщихМодулей.Вставить("Клиент"		, Новый Структура);
	КоллекцияОбщихМодулей.Вставить("Сервер"		, Новый Структура);
	КоллекцияОбщихМодулей.Вставить("Общие"		, Новый Структура);
	КоллекцияОбщихМодулей.Вставить("Глобальные"	, Новый Структура);
	
	Для Каждого МетаМодуль Из Метаданные.ОбщиеМодули Цикл
		Если МетаМодуль.КлиентОбычноеПриложение ИЛИ МетаМодуль.КлиентУправляемоеПриложение Тогда
			КоллекцияОбщихМодулей.Клиент.Вставить(МетаМодуль.Имя, Новый Структура);
		КонецЕсли;
		
		Если МетаМодуль.Сервер ИЛИ МетаМодуль.ВызовСервера ИЛИ МетаМодуль.ВнешнееСоединение Тогда
			КоллекцияОбщихМодулей.Сервер.Вставить(МетаМодуль.Имя, Новый Структура);
		КонецЕсли;
		
		Если МетаМодуль.Глобальный Тогда
			КоллекцияОбщихМодулей.Глобальные.Вставить(МетаМодуль.Имя, Новый Структура);
		Иначе 
			КоллекцияОбщихМодулей.Общие.Вставить(МетаМодуль.Имя, Новый Структура);
		КонецЕсли;
	КонецЦикла;
	
	//КоллекцияОбщихМодулей = Новый Структура;
	//КоллекцияОбщихМодулей.Вставить("Общие"		, ОписатьОбщиеМодулиНаСервере(Метаданные.ОбщиеМодули, Ложь));
	//КоллекцияОбщихМодулей.Вставить("Глобальные"	, ОписатьОбщиеМодулиНаСервере(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

Функция ПолучитьОписанияОбъектовМетаданных(знач ТипыОбъектов) Экспорт
	
	Результат = Новый Массив;
	
	МассивТипов = СтрРазделить(ТипыОбъектов, ",", Ложь);
	Для Каждого ИмяТипа Из МассивТипов Цикл
		Части = СтрРазделить(ИмяТипа, ".");
		
		ИмяКоллекции = PAPI_КонсольКодаКлиентСервер.ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
		
		Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
			
			ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			
			СтруктураОбъекта = Новый Структура();
			
			Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
				ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
			Иначе
				ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
			КонецЕсли;
			
			Данные = Новый Структура("Описание,Адрес", "", "");
			Данные.Адрес		= ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
			Данные.Описание	= PAPI_КонсольКодаКлиентСервер.СтруктуруВСтрокуJSON(СтруктураОбъекта);
			
			Результат.Добавить(Данные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокОбъектовМетаданных(знач ТипОбъектов) Экспорт
	
	Результат = Новый Структура("Описание,Адрес", "", "");
	
	ИмяКоллекции = PAPI_КонсольКодаКлиентСервер.ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);
		
		Результат.Описание	= PAPI_КонсольКодаКлиентСервер.СтруктуруВСтрокуJSON(СписокОбъектов);
		Результат.Адрес		= ИмяКоллекции + ".items";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФайлыМакетаКонсоли(знач АдресМакета, знач КаталогНаКлиенте, знач ИдентификаторФормы, знач Версия) Экспорт
	
	КаталогФайлов = PAPI_ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), "bsl_temp");
	
	Если ПустаяСтрока(АдресМакета) ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресМакета) Тогда
		АдресМакета = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПолучитьМакетКонсоли(АдресМакета);
	КонецЕсли;
	
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ПотокДляЧтения = ДанныеМакета.ОткрытьПотокДляЧтения();
	
	УдалитьИзВременногоХранилища(АдресМакета);

	Файл = Новый ЧтениеZipФайла(ПотокДляЧтения);
	Файл.ИзвлечьВсе(КаталогФайлов);
	Файл.Закрыть();
	Файл = Неопределено;
	
	ПотокДляЧтения.Закрыть();
	ДанныеМакета = Неопределено;
	
	ФайлыАрхива = НайтиФайлы(КаталогФайлов, "*", Истина);
	
	Результат = Новый Массив;
	Для Каждого Файл Из ФайлыАрхива Цикл           
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла		= Новый ДвоичныеДанные(Файл.ПолноеИмя);        
		АдресФайла		= ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы);
		ПутьКФайлу		= СтрЗаменить(Файл.ПолноеИмя, КаталогФайлов, КаталогНаКлиенте);
		ОписаниеФайла	= Новый ОписаниеПередаваемогоФайла(ПутьКФайлу, АдресФайла);
		Результат.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	// удалим временные файлы
	УдалитьФайлы(КаталогФайлов);
	
	// запись даты в файл версии
	ФайлВерсии = PAPI_КонсольКодаКлиентСервер.ПолучитьПутьКФайлуВерсииКонсоли(КаталогФайлов, Версия);
	Файл = Новый ЗаписьТекста(ФайлВерсии);
	Файл.ЗаписатьСтроку(ТекущаяДата());
	Файл.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#Область ОбщиеМодули

Функция ОписатьОбщиеМодулиНаСервере(знач Коллекция, знач ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура;
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

#КонецОбласти

#Область ОбъектыМетаданных
 
Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)
	
	ОписаниеРеквизитов = Новый Структура();
	ОписаниеРесурсов = Новый Структура();
	ОписаниеПредопределенных = Новый Структура();
	ОписаниеТабличныхЧастей = Новый Структура();
	ДополнительныеСвойства = Новый Структура();
	
	Связи = Новый Соответствие();
	
	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя,
			ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	
	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;
	
	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
	КонецЕсли;
	
	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
					
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
				
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПланаСчетов.Код КАК Код,
			|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	&Таблица КАК ТаблицаПланаСчетов
			|ГДЕ
			|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
			
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
	ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя,
	ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
				
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			СтруктураТабличнойЧасти = Новый Структура();
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли; 
		
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описываются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
					Связь = "exchangePlans." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
					Связь = "chartsOfCharacteristicTypes." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
					Связь = "chartsOfCalculationTypes." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
					Связь = "сhartsOfAccounts." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
					Связь = "businessProcesses." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
					Связь = "tasks." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВнешнийИсточникДанных

Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(знач СтруктураОбъекта, знач ОбъектМетаданных)
	
	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(знач ОбъектМетаданных)
	
	СтруктураИсточника = Новый Структура();
	
	ОписаниеТаблиц = Новый Структура();
	
	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл
		
		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");
		
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);
		
		ПоляТаблицы = Новый Структура();
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;
		
		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);
		
		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);
		
	КонецЦикла;
	
	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));
	
	Возврат СтруктураИсточника;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктуруВСтрокуJSON(знач Структура) Экспорт
	
	Возврат PAPI_КонсольКодаКлиентСервер.СтруктуруВСтрокуJSON(Структура);
	
КонецФункции

#КонецОбласти
