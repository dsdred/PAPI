#Область КонсольКода

// Добавлена консоль кода Monaco https://github.com/salexdv/bsl_console 
// На основе разработки https://infostart.ru/1c/tools/1989363/

#КонецОбласти

Функция ЭтаКонсоль(знач Форма, знач ИмяРеквизита) Экспорт
	ПараметрыКонсоли = PAPI_КонсольКодаКлиентСервер.ПолучитьСтрокуПараметровКонсоли(Форма, ИмяРеквизита);
	Если НЕ ПараметрыКонсоли.ДокументЗагружен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы	= PAPI_КонсольКодаКлиентСервер.ПолучитьПараметрыФормыКонсоли(Форма);
	ОбъектКонсоли	= Форма.Элементы[ПараметрыКонсоли.ИмяПоляHTML].Документ.defaultView;
	
	Структура = PAPI_КонсольКодаКлиентСервер.СтруктураОбъектКонсоли();
	Структура.Форма				= Форма;
	Структура.ОбъектКонсоли		= ОбъектКонсоли;
	Структура.ПараметрыФормы	= ПараметрыФормы;
	Структура.ПараметрыКонсоли	= ПараметрыКонсоли;
	
	Возврат Структура;
КонецФункции

Асинх Функция ИнициализацияПоляАсинх(знач Форма, знач ИмяРеквизита, знач ИмяПоляHTML = "") Экспорт
	
	Если ПустаяСтрока(ИмяПоляHTML) Тогда
		ИмяПоляHTML = ИмяРеквизита;
	КонецЕсли;
	
	ПараметрыФормы	= PAPI_КонсольКодаКлиентСервер.ПолучитьПараметрыФормыКонсоли(Форма);
	ИндексныйФайл	= Ждать СоздатьЭкземплярФайлаКонсолиАсинх(ПараметрыФормы);
	
	РеквизитВремФайлы = PAPI_КонсольКодаКлиентСервер.ИмяРеквизитаВременныеФайлы();
	Форма[РеквизитВремФайлы].Добавить(ИндексныйФайл);
	
	ПараметрыКонсоли = PAPI_КонсольКодаКлиентСервер.ПолучитьСтрокуПараметровКонсоли(Форма, ИмяРеквизита);
	ПараметрыКонсоли.ИмяПоляHTML			= ИмяПоляHTML;
	ПараметрыКонсоли.ИндексныйФайл			= ИндексныйФайл;
	ПараметрыКонсоли.ИсходникиЗагружены		= Истина;
	
	ПараметрыКонсоли.РежимЗапроса	= Ложь;
	ПараметрыКонсоли.РежимСравнения	= Ложь;
	
	ПараметрыКонсоли.ТекущаяТема			= "СветлаяТема";
	ПараметрыКонсоли.ПодсвечиватьЗапросы	= Ложь;	
	ПараметрыКонсоли.БыстрыеПодсказки		= Истина;
	ПараметрыКонсоли.КартаКода				= Истина;
	ПараметрыКонсоли.ПробелыИТабуляции		= Ложь;
	ПараметрыКонсоли.СтрокаСостояния		= Ложь;
	
	ПараметрыКонсоли.ДополнительныеСвойства	= Новый Структура;
	
	Форма[ИмяРеквизита] = ИндексныйФайл;
	Форма.Элементы[ИмяПоляHTML].Доступность = Ложь;
	
	Возврат ЭтаКонсоль(Форма, ИмяРеквизита);
	
КонецФункции

#Область ПрограммныйИнтерфейс

Процедура ОповещатьПриИзменении(знач Консоль, знач Значение) Экспорт 
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.ОповещатьПриИзменении = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.ОповещатьПриИзменении = Значение;
	
	// обязательно наличие Процедура ПриИзмененииПоляКонсоли(Консоль) Экспорт на форме
	
КонецПроцедуры

Процедура ДоступностьСравнения(знач Консоль, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_СравнитьСОригиналом";
		
	PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
		ИмяЭлемента, "Доступность", Значение);
	
КонецПроцедуры

Процедура ОбнулитьМетаданные(знач Консоль) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).clearMetadata();
	
	ОбновитьСписокОбщихМодулей(Консоль);
	
КонецПроцедуры

Процедура УстановитьКонтент(знач Консоль, знач Текст) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).setContent(Текст);
	
КонецПроцедуры

Процедура УстановитьТекст(знач Консоль, знач Текст, знач Позиция = 0, знач УчитыватьОтступПервойСтроки = Ложь) Экспорт 
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначМодифицированность = Консоль.Форма.Модифицированность;
	
	ОбъектКонсоль(Консоль).setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
	Консоль.Форма.Модифицированность = ЗначМодифицированность;
	
КонецПроцедуры

Процедура УстановитьОригинальныйТекст(знач Консоль, знач Текст) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.ОригинальныйТекст = Текст Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		ОбъектКонсоль(Консоль).setOriginalText(Текст, Истина);
	Иначе 
		ОбъектКонсоль(Консоль).setOriginalText(Текст);
	КонецЕсли;
	
	ПараметрыКонсоли.ОригинальныйТекст = Текст;
	
КонецПроцедуры

Процедура УстановитьДирективуКомпиляции(знач Консоль, знач Директива, знач Обновить = Истина) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПустаяСтрока(Директива) И СтрНайти("наклиенте,насервере", НРег(Директива)) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(Консоль.ПараметрыКонсоли) = НРег(Директива) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	ПараметрыКонсоли.ДирективаКомпиляции = Директива;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяНаСервере	= ПараметрыКонсоли.ИмяРеквизита + "_НаСервере";
		ИмяНаКлиенте	= ПараметрыКонсоли.ИмяРеквизита + "_НаКлиенте";
		ИмяКлиентСервер	= ПараметрыКонсоли.ИмяРеквизита + "_КлиентСервер";
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяНаСервере, "Пометка", (Директива = "НаСервере"));
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяНаКлиенте, "Пометка", (Директива = "НаКлиенте"));
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяКлиентСервер, "Пометка", ПустаяСтрока(Директива));
	КонецЕсли;
	
	Если Обновить Тогда
		ОбнулитьМетаданные(Консоль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТекст(знач Консоль) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).eraseText();
	
КонецПроцедуры

Процедура УстановитьТему(знач Консоль, знач Тема) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ТемаКонсоли = ИмяТемыКонсоли(Тема);
	Если ПустаяСтрока(ТемаКонсоли) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	ПараметрыКонсоли.ТекущаяТема = Тема;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяПодменюТемы = ПараметрыКонсоли.ИмяРеквизита + "_Темы";
		ИмяЭлементаТемы = ПараметрыКонсоли.ИмяРеквизита + "_" + Тема;
		
		Для Каждого Элемент Из Консоль.Форма.Элементы[ИмяПодменюТемы].ПодчиненныеЭлементы Цикл
			Элемент.Пометка = (Элемент.Имя = ИмяЭлементаТемы);
		КонецЦикла;
	КонецЕсли;
	
	ИмяТемы = ТемаКонсоли + ?(ПараметрыКонсоли.ПодсвечиватьЗапросы, "-query", "");
	ОбъектКонсоль(Консоль).setTheme(ИмяТемы);
	
КонецПроцедуры

Процедура БыстрыеПодсказки(знач Консоль, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.БыстрыеПодсказки = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.БыстрыеПодсказки = Значение;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_БыстрыеПодсказки";
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "Пометка", ПараметрыКонсоли.БыстрыеПодсказки);
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).enableQuickSuggestions(ПараметрыКонсоли.БыстрыеПодсказки);
	
КонецПроцедуры

Процедура ПодсвечиватьЗапросы(знач Консоль, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.ПодсвечиватьЗапросы = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.ПодсвечиватьЗапросы = Значение;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_ПодсвечиватьЗапросы";
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "Пометка", ПараметрыКонсоли.ПодсвечиватьЗапросы);
	КонецЕсли;
	
	УстановитьТему(Консоль, ПараметрыКонсоли.ТекущаяТема);
	
КонецПроцедуры

Процедура КартаКода(знач Консоль, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.КартаКода = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.КартаКода = Значение;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_КартаКода";
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "Пометка", ПараметрыКонсоли.КартаКода);
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).minimap(ПараметрыКонсоли.КартаКода);
	
КонецПроцедуры

Процедура ПробелыИТабуляции(знач Консоль, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.ПробелыИТабуляции = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.ПробелыИТабуляции = Значение;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_ПробелыИТабуляции";
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "Пометка", ПараметрыКонсоли.ПробелыИТабуляции);
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).renderWhitespace(ПараметрыКонсоли.ПробелыИТабуляции);
	
КонецПроцедуры

Процедура СтрокаСостояния(знач Консоль, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.СтрокаСостояния = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.СтрокаСостояния = Значение;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_СтрокаСостояния";
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "Пометка", ПараметрыКонсоли.СтрокаСостояния);
	КонецЕсли;
	
	Если ПараметрыКонсоли.СтрокаСостояния Тогда
		ОбъектКонсоль(Консоль).showStatusBar();
	Иначе
		ОбъектКонсоль(Консоль).hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры

Процедура РежимСравнения(знач Консоль, знач Значение, знач Текст = "") Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если НЕ ТипЗнч(Текст) = Тип("Строка") ИЛИ ПустаяСтрока(Текст) Тогда
		Текст = ПараметрыКонсоли.ОригинальныйТекст;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Текст = ПолучитьОригинальныйТекст(Консоль);
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		PAPI_ОбщегоНазначенияКлиентСервер.КраткоеСообщениеПользователю(НСтр("ru='Оригинальный текст для сравнения пустой.'"));
		Значение = Ложь;
	КонецЕсли;
	
	Если ПараметрыКонсоли.РежимСравнения = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.РежимСравнения = Значение;
	
	Если ЕстьКоманднаяПанель(Консоль) Тогда
		ИмяЭлемента = ПараметрыКонсоли.ИмяРеквизита + "_СравнитьСОригиналом";
		ГруппаПеремещение = ПараметрыКонсоли.ИмяРеквизита + "_Перемещение";
		ГруппаРедактирование = ПараметрыКонсоли.ИмяРеквизита + "_Редактирование";
		
		ПоложениеКнопки = ?(ПараметрыКонсоли.РежимСравнения,
			ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели,
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю);
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "Пометка", ПараметрыКонсоли.РежимСравнения);
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ИмяЭлемента, "ПоложениеВКоманднойПанели", ПоложениеКнопки);
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ГруппаПеремещение, "Видимость", ПараметрыКонсоли.РежимСравнения);
		
		PAPI_ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Консоль.Форма.Элементы,
			ГруппаРедактирование, "Видимость", НЕ ПараметрыКонсоли.РежимСравнения);
	КонецЕсли;
		
	Если ПараметрыКонсоли.РежимСравнения Тогда
		
		ОбъектКонсоль(Консоль).compare(Текст, Истина, Истина);
		
	Иначе 
		
		ОбъектКонсоль(Консоль).compare();
		ОбъектКонсоль(Консоль).setOriginalText(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредыдущееРасхождение(знач Консоль) Экспорт 
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ВключенРежимСравнения(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).previousDiff();
	
КонецПроцедуры

Процедура СледующееРасхождение(знач Консоль) Экспорт 
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ВключенРежимСравнения(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектКонсоль(Консоль).nextDiff();
	
КонецПроцедуры

Процедура УстановитьСвойство(знач Консоль, знач ИмяСвойства, знач Значение) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	ПараметрыКонсоли.ДополнительныеСвойства.Вставить(ИмяСвойства, Значение);
	
КонецПроцедуры

Процедура УдалитьСвойство(знач Консоль, знач ИмяСвойства) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	
	Если ПараметрыКонсоли.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		ПараметрыКонсоли.ДополнительныеСвойства.Удалить(ИмяСвойства);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьПользовательскиеОбъекты(знач Консоль, знач Данные) Экспорт
	Результат = Новый Структура("Выполнено,ТекстОшибки", Ложь, "");
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Результат.ТекстОшибки = НСтр("ru='Неверно передан параметр ""Консоль"".'");
		Возврат Результат;
	КонецЕсли;
	
	СтруктураОбъекты = Новый Структура("customObjects", Неопределено);
	Если ТипЗнч(Данные) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураОбъекты.customObjects = Новый Структура(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура") Тогда
		СтруктураОбъекты.customObjects = Данные;
	Иначе 
		Результат.ТекстОшибки = НСтр("ru='Неверно передан параметр ""Данные"".'");
		Возврат Результат;
	КонецЕсли;
	
	СтрокаJSON = PAPI_КонсольКодаКлиентСервер.СтруктуруВСтрокуJSON(СтруктураОбъекты);
	РезультатОбновления = ОбъектКонсоль(Консоль).updateMetadata(СтрокаJSON);
	
	Если НЕ ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось загрузить пользовательские объекты: %1%2'"),
			Символы.ПС,
			РезультатОбновления.errorDescription);
			
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьТекст(знач Консоль) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбъектКонсоль(Консоль).getText();
	
КонецФункции

Функция ПолучитьОригинальныйТекст(знач Консоль) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПустаяСтрока(ПараметрыКонсоли.ОригинальныйТекст) Тогда
		ПараметрыКонсоли.ОригинальныйТекст = ОбъектКонсоль(Консоль).getOriginalText();
	КонецЕсли;
	
	Возврат ПараметрыКонсоли.ОригинальныйТекст;
	
КонецФункции

Функция РежимЗапроса(знач Консоль, знач Значение = Неопределено) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
		Возврат ОбъектКонсоль(Консоль).isQueryMode();
	КонецЕсли;
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	Если ПараметрыКонсоли.РежимЗапроса = Значение Тогда
		Возврат Значение;
	КонецЕсли;
	
	ПараметрыКонсоли.РежимЗапроса = Значение;
	
	ИдентификаторРежима = ?(Значение, "bsl_query", "bsl");
	ОбъектКонсоль(Консоль).setLanguageMode(ИдентификаторРежима);
	ОбъектКонсоль(Консоль).updateText("", Ложь, Ложь);
	
	Возврат ОбъектКонсоль(Консоль).isQueryMode();
	
КонецФункции

Функция ТолькоПросмотр(знач Консоль, знач Значение = Неопределено) Экспорт
	
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Значение = Неопределено Тогда
		ОбъектКонсоль(Консоль).setReadOnly(Значение);
	КонецЕсли;
	
	Возврат ОбъектКонсоль(Консоль).getReadOnly();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

Асинх Функция ПриОткрытииАсинх(знач Форма, Отказ) Экспорт 
	
	Результат = Ждать ИнициализацияКонсолиАсинх(Форма);
	
	Возврат Результат;
	
КонецФункции

Асинх Функция ПередЗакрытиемАсинх(знач Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	РеквизитВремФайлы = PAPI_КонсольКодаКлиентСервер.ИмяРеквизитаВременныеФайлы();
	Для Каждого ЭлементСписка Из Форма[РеквизитВремФайлы] Цикл
		Ждать УдалитьФайлыАсинх(ЭлементСписка.Значение);
		//PAPI_ОбщегоНазначенияКлиентСервер.КраткоеСообщениеПользователю(НСтр("ru='Удален файл: '") + ЭлементСписка.Значение);
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

Процедура КонсольДокументСформирован(знач Форма, знач ИмяРеквизита, знач Элемент) Экспорт
	
	ПараметрыКонсоли = PAPI_КонсольКодаКлиентСервер.ПолучитьСтрокуПараметровКонсоли(Форма, ИмяРеквизита);
	
	Если НЕ ПараметрыКонсоли.ИсходникиЗагружены Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли.ДокументЗагружен = Истина;
	
	Консоль = ЭтаКонсоль(Форма, ИмяРеквизита);
	Объект	= ОбъектКонсоль(Консоль);
		
	Инфо = Новый СистемнаяИнформация();
	
	Объект.init(Инфо.ВерсияПриложения);
	Объект.setOption("autoResizeEditorLayout", Истина);
	Объект.setOption("renderQueryDelimiters", Истина);
	Объект.setOption("generateModificationEvent", Истина);
	Объект.hideScrollX();
	Объект.hideScrollY();
	
	РежимЗапроса(Консоль, ПараметрыКонсоли.РежимЗапроса);
	
	Если ЗначениеЗаполнено(ПараметрыКонсоли.ТекстАлгоритма) Тогда
		ОчиститьТекст(Консоль);
		УстановитьТекст(Консоль, ПараметрыКонсоли.ТекстАлгоритма, 0, Ложь);
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		ТолькоПросмотр(Консоль, Истина);
	КонецЕсли;
	
	Форма.Элементы[ПараметрыКонсоли.ИмяПоляHTML].Доступность = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИнициализациПоляКонсоли", Форма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяРеквизита);
	
КонецПроцедуры

Процедура КонсольПриНажатии(знач Форма, знач ИмяРеквизита, знач Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Консоль = ЭтаКонсоль(Форма, ИмяРеквизита);
	
	ОбработатьСобытиеРедактора(Форма, Консоль, ДанныеСобытия.Event.eventData1C);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_КомандыФормы

Процедура ВыполнитьКомандуКонсолиКода(знач Форма, знач Команда) Экспорт
	Подстроки = СтрРазделить(Команда.Имя, "_");
	
	ИмяРеквизита	= Подстроки[0];
	ИмяКоманды		= Подстроки[1];
	
	Консоль = ЭтаКонсоль(Форма, ИмяРеквизита);
	Если НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСтруктураОбъектКонсоли(Консоль) Тогда
		Возврат;
	КонецЕсли;
	
	ВРегИмя = ВРег(ИмяКоманды);
	
	Если ВРегИмя = "КОНСТРУКТОРЗАПРОСА" Тогда
		
		Команда_КонструкторЗапроса(Консоль);
		
	ИначеЕсли ВРегИмя = "СВЕТЛАЯТЕМА" ИЛИ ВРегИмя = "ТЕМНАЯТЕМА" Тогда
		
		УстановитьТему(Консоль, ИмяКоманды);
		
	ИначеЕсли ВРегИмя = "БЫСТРЫЕПОДСКАЗКИ" Тогда
		
		БыстрыеПодсказки(Консоль, НЕ Консоль.ПараметрыКонсоли.БыстрыеПодсказки);
		
	ИначеЕсли ВРегИмя = "ПОДСВЕЧИВАТЬЗАПРОСЫ" Тогда
		
		ПодсвечиватьЗапросы(Консоль, НЕ Консоль.ПараметрыКонсоли.ПодсвечиватьЗапросы);
		
	ИначеЕсли ВРегИмя = "КАРТАКОДА" Тогда
		
		КартаКода(Консоль, НЕ Консоль.ПараметрыКонсоли.КартаКода);
		
	ИначеЕсли ВРегИмя = "ПРОБЕЛЫИТАБУЛЯЦИИ" Тогда
		
		ПробелыИТабуляции(Консоль, НЕ Консоль.ПараметрыКонсоли.ПробелыИТабуляции);
		
	ИначеЕсли ВРегИмя = "СТРОКАСОСТОЯНИЯ" Тогда
		
		СтрокаСостояния(Консоль, НЕ Консоль.ПараметрыКонсоли.СтрокаСостояния);
		
	ИначеЕсли ВРегИмя = "СРАВНИТЬСОРИГИНАЛОМ" Тогда
		
		РежимСравнения(Консоль, НЕ Консоль.ПараметрыКонсоли.РежимСравнения);
		
	ИначеЕсли ВРегИмя = "ПРЕДЫДУЩЕЕРАСХОЖДЕНИЕ" Тогда
		
		ПредыдущееРасхождение(Консоль);
		
	ИначеЕсли ВРегИмя = "СЛЕДУЮЩЕЕРАСХОЖДЕНИЕ" Тогда
		
		СледующееРасхождение(Консоль);
		
	ИначеЕсли ВРегИмя = "НАКЛИЕНТЕ" Тогда
		
		УстановитьДирективуКомпиляции(Консоль, "НаКлиенте", Истина);
		
	ИначеЕсли ВРегИмя = "НАСЕРВЕРЕ" Тогда
		
		УстановитьДирективуКомпиляции(Консоль, "НаСервере", Истина);
		
	ИначеЕсли ВРегИмя = "КЛИЕНТСЕРВЕР" Тогда
		
		УстановитьДирективуКомпиляции(Консоль, "", Истина);
		
	КонецЕсли;
КонецПроцедуры
	
Процедура Команда_КонструкторЗапроса(знач Консоль)
	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	
	Если ПараметрыКонсоли.РежимЗапроса Тогда
		ТекстЗапроса = ПолучитьТекст(Консоль);
	Иначе 
		ТекстЗапроса = ОбъектКонсоль(Консоль).getQuery();
	КонецЕсли;
	
	ВызватьКонструкторЗапроса(Консоль, ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Асинх Функция ИнициализацияКонсолиАсинх(знач Форма)
	Результат = Новый Структура("Выполнено,ТекстОшибки", Ложь, "");
	
	РасширениеПодключено = Ждать PAPI_ФайловаяСистемаКлиентАсинх.ПодключитьРасширениеДляРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		PAPI_ФайловаяСистемаКлиентАсинх.СообщитьОшибкуПодключенияРасширения(Ложь, Истина);
		
		Результат.ТекстОшибки = НСтр("ru='Расширение для работы с файлами не подключено.'");
		Возврат Результат;
	КонецЕсли;
	
	ИмяПараметры = PAPI_КонсольКодаКлиентСервер.ИмяРеквизитаПараметрыКонсолиКода();
	Параметры = Форма[ИмяПараметры];

	РезультатКонсоли = Ждать ПроверитьИсходникиАсинх(Параметры);
	Если НЕ РезультатКонсоли.Выполнено Тогда
		Результат.ТекстОшибки = РезультатКонсоли.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("АдресМакетаКонсоли", РезультатКонсоли.АдресМакетаКонсоли);
	НовыеПараметры.Вставить("КаталогИсходников"	, РезультатКонсоли.КаталогИсходников);
	PAPI_КонсольКодаКлиентСервер.УстановитьПараметрыФормыКонсоли(Форма, НовыеПараметры);
	
	Результат.Выполнено = Истина;
	Возврат Результат;
КонецФункции

Асинх Функция ПроверитьИсходникиАсинх(знач Параметры)
	Результат = Новый Структура("Выполнено, ТекстОшибки, АдресМакетаКонсоли, КаталогИсходников, ФайлВерсии",
		Ложь,
		"",
		Параметры.АдресМакетаКонсоли,
		"",
		"");
	
	КаталогФайлов = Ждать КаталогВременныхФайловАсинх();
	
	Результат.КаталогИсходников = PAPI_ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогФайлов, "bsl_console");
	Ждать СоздатьКаталогАсинх(Результат.КаталогИсходников);
	
	ФайлКаталога = Новый Файл(Результат.КаталогИсходников);
	КаталогСуществует = Ждать ФайлКаталога.СуществуетАсинх();
	Если НЕ КаталогСуществует Тогда
		Результат.ТекстОшибки = НСтр("ru='Не найден каталог исходных файлов консоли кода. Попробуйте еще раз или обратитесь к разработчику.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.ФайлВерсии = PAPI_КонсольКодаКлиентСервер.ПолучитьПутьКФайлуВерсииКонсоли(Результат.КаталогИсходников, Параметры.Версия + ".ver");
	
	ФайлВерсии = Новый Файл(Результат.ФайлВерсии);
	ФайлСуществует = Ждать ФайлВерсии.СуществуетАсинх();
	Если ФайлСуществует Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
		
	Ждать УдалитьФайлыАсинх(Результат.КаталогИсходников, "*.*");
	
	Если ПустаяСтрока(Результат.АдресМакетаКонсоли) ИЛИ НЕ ЭтоАдресВременногоХранилища(Результат.АдресМакетаКонсоли) Тогда
		Результат.АдресМакетаКонсоли = ПоместитьВоВременноеХранилище(Неопределено, Параметры.УникальныйИдентификатор);
		PAPI_КонсольКодаВызовСервера.ПолучитьМакетКонсоли(Результат.АдресМакетаКонсоли);
	КонецЕсли;
	
	ДанныеМакета = ПолучитьИзВременногоХранилища(Результат.АдресМакетаКонсоли);
	ПотокДляЧтения = ДанныеМакета.ОткрытьПотокДляЧтения();

	Файл = Новый ЧтениеZipФайла(ПотокДляЧтения);
	Файл.ИзвлечьВсе(Результат.КаталогИсходников);
	
	// очистка переменных
	Файл.Закрыть();
	Файл = Неопределено; 
	
	Ждать ПотокДляЧтения.ЗакрытьАсинх();
	ДанныеМакета = Неопределено;
	
	// запись даты в файл версии
	Файл = Новый ЗаписьТекста(Результат.ФайлВерсии);
	Файл.ЗаписатьСтроку(ТекущаяДата());
	Файл.Закрыть();
	
	УдалитьИзВременногоХранилища(Результат.АдресМакетаКонсоли);
	Результат.АдресМакетаКонсоли = "";
	
	Результат.Выполнено = Истина;
	Возврат Результат;
КонецФункции

Асинх Функция СоздатьЭкземплярФайлаКонсолиАсинх(знач Параметры)
	ИмяФайла = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
	ИмяИндексногоФайла		= СтрШаблон("temp_%1.html", ИмяФайла);
	ПутьКИндексномуФайлу	= PAPI_ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Параметры.КаталогИсходников, ИмяИндексногоФайла);
	
	ПутьКФайлуИндекс = PAPI_ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Параметры.КаталогИсходников, "index.html");
	Ждать КопироватьФайлАсинх(ПутьКФайлуИндекс, ПутьКИндексномуФайлу);
	
	Возврат ПутьКИндексномуФайлу;
КонецФункции

Функция ОбъектКонсоль(знач Консоль)
	Возврат Консоль.ОбъектКонсоли;
КонецФункции

Функция ВключенРежимСравнения(знач Консоль)
	
	Возврат Консоль.ПараметрыКонсоли.РежимСравнения;
	
КонецФункции

Функция ПолучитьКаталогИсходногоКода(знач Консоль)
	
	ПараметрыФормы		= Консоль.ПараметрыФормы;
	ПараметрыКонсоли	= Консоль.ПараметрыКонсоли;
	
	ПутьККаталогу = ?(НЕ ПустаяСтрока(ПараметрыКонсоли.КаталогИсходногоКода),
		ПараметрыКонсоли.КаталогИсходногоКода,
		ПараметрыФормы.КаталогИсходногоКода);
		
	Возврат НормализоватьПуть(ПутьККаталогу);
	
КонецФункции

Функция ЕстьКоманднаяПанель(знач Консоль)
	Если ПустаяСтрока(Консоль.ПараметрыКонсоли.ИмяКоманднойПанели) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Консоль.Форма.Элементы.Найти(Консоль.ПараметрыКонсоли.ИмяКоманднойПанели) <> Неопределено;
КонецФункции

Функция НормализоватьПуть(знач Путь)
	
	РазделительПути = ПолучитьРазделительПутиКлиента();
	
	Путь = СокрЛП(Путь);
	
	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

Функция ИмяТемыКонсоли(знач Имя)
	Имена = Новый Структура;
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	ТемаКонсоли = Неопределено;
	ЕстьСвойство = Имена.Свойство(Имя, ТемаКонсоли);
	
	Возврат ?(ЕстьСвойство, ТемаКонсоли, "");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КонсольКода

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьСобытиеРедактора(знач Форма, знач Консоль, знач Событие)
	
	Если Событие <> Неопределено Тогда
		
		ИмяСобытия = Событие.event;
		
		Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Консоль, Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Консоль, Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Консоль, Событие.params);
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			Если Консоль.ПараметрыКонсоли.ОповещатьПриИзменении Тогда
				Форма.ПриИзмененииПоляКонсоли(Консоль);
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
			Если 0 < СтрНайти(Событие.params.href, "e1cib") Тогда
				ПерейтиПоНавигационнойСсылке(Событие.params.href);
			КонецЕсли;
		КонецЕсли;
		
		//Если ИмяСобытия = "EVENT_GET_VARIABLE_DATA" Тогда
		//	ОбработкаСобытияПолученияПеременной(Консоль, Событие.params);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторЗапросов

Процедура ОткрытьКонструкторЗапроса(знач Консоль, знач Текст, знач ДопПараметры)
	#Если НЕ МобильныйКлиент Тогда	
	ПараметрыКонсоли = Консоль.ПараметрыКонсоли;
	ВременныеТаблицы = PAPI_ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыКонсоли.ДополнительныеСвойства, "ВременныеТаблицы", Новый Массив);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Консоль"		, Консоль);
	ПараметрыОповещения.Вставить("ДопПараметры"	, ДопПараметры);
	
	Оповещение = Новый ОписаниеОповещения("КонструкторЗапросаЗавершение", PAPI_КонсольКодаКлиент, ПараметрыОповещения);
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.Текст = Текст;
	КонструкторЗапроса.РежимКомпоновкиДанных = Ложь;
    КонструкторЗапроса.Показать(Оповещение);
	#КонецЕсли
КонецПроцедуры

Асинх Процедура ВызватьКонструкторЗапроса(знач Консоль, знач ПараметрыЗапроса, знач Параметры = Неопределено)
	
	Если ТолькоПросмотр(Консоль) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗапроса = Неопределено Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru='Не найден текст запроса. Создать новый запрос?'"),
			РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Нет);
			
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = "";
		ДопПараметры = Неопределено;
	ИначеЕсли ТипЗнч(ПараметрыЗапроса) = Тип("Строка") Тогда
		ТекстЗапроса = ПараметрыЗапроса;
		ДопПараметры = Неопределено;
	Иначе 
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ДопПараметры = ПараметрыЗапроса.range;
	КонецЕсли;
	
    ОткрытьКонструкторЗапроса(Консоль, ТекстЗапроса, ДопПараметры);
	
КонецПроцедуры

Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура КонструкторЗапросаЗавершение(знач Текст, знач Параметры) Экспорт
	
	Если НЕ ТипЗнч(Текст) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонсоли = Параметры.Консоль.ПараметрыКонсоли;
	
	Если Не РежимЗапроса(Параметры.Консоль) Тогда
		Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
		Текст = СтрЗаменить(Текст, """", """""");
		Текст = """" + Текст + """";
	КонецЕсли;
	
	Если ПараметрыКонсоли.РежимЗапроса Тогда
		ОчиститьТекст(Параметры.Консоль);
	КонецЕсли;
	
	УстановитьТекст(Параметры.Консоль, Текст, Параметры.ДопПараметры, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Асинх Процедура ОткрытьКонструкторФорматнойСтроки(знач Консоль, знач ФорматнаяСтрока, знач ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки;
	
	Попытка			
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	ФорматнаяСтрока = Ждать Конструктор.ОткрытьАсинх();
	Если НЕ ТипЗнч(ФорматнаяСтрока) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
	ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
	УстановитьТекст(Консоль, ФорматнаяСтрока, ДопПараметры, Ложь);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВызватьКонструкторФорматнойСтроки(знач Консоль, знач ПараметрыСтроки)
	
	Если ПараметрыСтроки = Неопределено Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru='Форматная строка не найдена. Создать новую форматную строку?'"),
			РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Нет);
			
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ФорматнаяСтрока = "";
		ДопПараметры	= Неопределено;
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ДопПараметры	= ПараметрыСтроки.range;
	КонецЕсли;
	
	ОткрытьКонструкторФорматнойСтроки(Консоль, ФорматнаяСтрока, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

Функция ЗагрузитьОбъектМетаданныхПоЗапросу(знач Консоль, знач ПараметрыЗапроса)
	
	МассивОписаний = PAPI_КонсольКодаВызовСервера.ПолучитьОписанияОбъектовМетаданных(ПараметрыЗапроса);
	
	Загружено = Истина;
	Для Каждого ДанныеОписания Из МассивОписаний Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеОписания.Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ОбъектКонсоль(Консоль).updateMetadata(ДанныеОписания.Описание, ДанныеОписания.Адрес);
		Если НЕ ТипЗнч(Результат) = Тип("Булево") ИЛИ Результат = Ложь Тогда
			Загружено = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Загружено;
	
КонецФункции

Функция ЗагрузитьСписокМетаданныхПоЗапросу(знач Консоль, знач ПараметрыЗапроса)
	
	ДанныеОписания = PAPI_КонсольКодаВызовСервера.ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса);
		
	Если ЗначениеЗаполнено(ДанныеОписания.Описание) Тогда
		
		Результат = ОбъектКонсоль(Консоль).updateMetadata(ДанныеОписания.Описание, ДанныеОписания.Адрес);
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Асинх Процедура ОбработкаСобытияПолученияМетаданных(знач Консоль, знач Событие)
	
	ПараметрыЗапроса = НРег(Событие.metadata);
	ВызыватьПодсказку = (Событие.trigger = "suggestion");
	ДанныеОбновлены = Ложь;
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = Ждать ЗагрузитьСтруктуруОбщегоМодуляПоЗапросуАсинх(Консоль, ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = Ждать ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросуАсинх(Консоль, ЧастиЗапроса);
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(Консоль, ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(Консоль, ПараметрыЗапроса);
		
	КонецЕсли;
	
	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		ОбъектКонсоль(Консоль).triggerSuggestions();
	КонецЕсли;
	
	Если Событие.trigger = "snippet"  Тогда
		ОбъектКонсоль(Консоль).updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

Процедура ОбновитьСписокОбщихМодулей(знач Консоль)
	ПараметрыФормы = Консоль.ПараметрыФормы;
	Если НЕ ЭтоАдресВременногоХранилища(ПараметрыФормы.АдресОбщихМодулей) Тогда
		Возврат;
	КонецЕсли;
	
	Директива = Консоль.ПараметрыКонсоли.ДирективаКомпиляции;
	Если НРег(Директива) = "насервере" Тогда
		КоллекцияМодулей = ПолучитьИзВременногоХранилища(ПараметрыФормы.АдресСерверныхМодулей);
	ИначеЕсли НРег(Директива) = "наклиенте" Тогда 
		КоллекцияМодулей = ПолучитьИзВременногоХранилища(ПараметрыФормы.АдресКлиентскихМодулей);
	Иначе 
		КоллекцияМодулей = ПолучитьИзВременногоХранилища(ПараметрыФормы.АдресОбщихМодулей);
	КонецЕсли;
	
	Если КоллекцияМодулей <> Неопределено Тогда
		Результат = ОбъектКонсоль(Консоль).updateMetadata(КоллекцияМодулей, "commonModules.items");
		ЗагрузитьГлобальныеМодули(Консоль);
	КонецЕсли;
КонецПроцедуры

Асинх Процедура ЗагрузитьГлобальныеМодули(знач Консоль)
	
	КаталогКода = ПолучитьКаталогИсходногоКода(Консоль);
	ПараметрыФормы = Консоль.ПараметрыФормы;
	
	Если ПустаяСтрока(КаталогКода)Тогда
		Возврат;
	ИначеЕсли НЕ PAPI_КонсольКодаКлиентСервер.ЭтоМассив(ПараметрыФормы.ГлобальныйМодули) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьГлобальныеМодули = (ПараметрыФормы.ГлобальныйМодули <> Неопределено И 0 < ПараметрыФормы.ГлобальныйМодули.Количество());
	
	Если ЗначениеЗаполнено(КаталогКода) И ЕстьГлобальныеМодули Тогда
		
		КаталогМодулей = КаталогКода + "CommonModules";
		
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		КаталогСуществует = Ждать КаталогНаДиске.СуществуетАсинх();
		Если КаталогСуществует Тогда
			
			Индекс = 0;
			
			Пока Индекс < ПараметрыФормы.ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ПараметрыФормы.ГлобальныйМодули.Получить(Индекс);
				Ждать ЗагрузитьОбщийМодульПоИмениАсинх(Консоль, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Асинх Функция ЗагрузитьОбщийМодульПоИмениАсинх(знач Консоль, знач ИмяМодуля, знач Глобальный)
	
	КаталогКода	= ПолучитьКаталогИсходногоКода(Консоль);
	ПараметрыФормы	= Консоль.ПараметрыФормы;
	
	ЗагруженоФункций = 0;
	
	Если ПустаяСтрока(КаталогКода)Тогда
		Возврат ЗагруженоФункций;
	ИначеЕсли НЕ PAPI_КонсольКодаКлиентСервер.ЭтоСоответствие(ПараметрыФормы.ИменаОбщихМодулей) Тогда
		Возврат ЗагруженоФункций;
	КонецЕсли;
	
	ИмяВКонфигураторе = ПараметрыФормы.ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", ПолучитьРазделительПутиКлиента(), ИмяВКонфигураторе);
	ФайлМодуля = КаталогКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	ФайлСуществует = Ждать ФайлНаДиске.СуществуетАсинх();
	Если ФайлСуществует Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		
		ЗагруженоФункций = ОбъектКонсоль(Консоль).parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

Асинх Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмениАсинх(знач Консоль, знач СтруктураВыгрузки)
	
	КаталогКода = ПолучитьКаталогИсходногоКода(Консоль);
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	Если ПустаяСтрока(КаталогКода)Тогда
		Возврат ЗагруженоФункций;
	КонецЕсли;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, ПолучитьРазделительПутиКлиента(), ИмяТипа);
	ФайлМодуля = КаталогКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	ФайлСуществует = Ждать ФайлНаДиске.СуществуетАсинх();
	Если ФайлСуществует Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = PAPI_КонсольКодаКлиентСервер.ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = ОбъектКонсоль(Консоль).parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

Асинх Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросуАсинх(знач Консоль, знач ЧастиЗапроса)
	
	КаталогКода = ПолучитьКаталогИсходногоКода(Консоль);
	
	Если ПустаяСтрока(КаталогКода)Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЧастейЗапроса = 2;
	
	Если ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = Ждать ЗагрузитьОбщийМодульПоИмениАсинх(Консоль, ИмяМодуля, Ложь);
		
		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Асинх Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросуАсинх(знач Консоль, знач ЧастиЗапроса)
	
	КаталогКода = ПолучитьКаталогИсходногоКода(Консоль);
	
	Если ПустаяСтрока(КаталогКода)Тогда
		Возврат Ложь;
	КонецЕсли;

	КоличествоЧастейЗапроса = 4;
	
	Если ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля"        , ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных"    , ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных" , ЧастиЗапроса[3]);
		
		PAPI_КонсольКодаВызовСервера.ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, ПолучитьРазделительПутиКлиента());
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = Ждать ЗагрузитьМодульМенеджераИлиОбъектаПоИмениАсинх(Консоль, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьМодульИзИсходников(знач ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПутиКлиента(), Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	ЧтениеТекста = Неопределено;
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

#КонецОбласти

#КонецОбласти


