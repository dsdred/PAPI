#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Описание внешней обработки для PAPI
// 
// Возвращаемое значение:
//   Структура - параметры внешнего отчета или обработки:
//       * ВидОбработки - Строка - вид внешней обработки. 
//           PAPI_РаботаСВнешнимиОбработками.ВидОбработки<ИмяВида>.
//           Также вид можно указать явно:
//           "Подписки", 		- только подписки
//           "Произвольная", 	- только процедуры и функции
//           "Смешанная"		- Содержит как подписки так и самостоятельные процедуры и функции
//       * Информация - Строка - краткая информация о внешней обработке.
//       * Команды - ТаблицаЗначений - настройки команд:
//          ** ИсполняемыйТип 	- Строка - "Процедура" или "Функция" 
//          ** Наименование 	- Строка - Наименование процедуры/функции 
//          ** ТипПодписки 		- ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие - Тип подписки
//          ** Источник			- Строка - Источник. Пример: "РегистрСведенийМенеджер"
//          ** Подписка 		- Булево - Истина если команда является подпиской
//
//////////////////////////////////////////////////////////////////////////////////////////
//                                                                               		//
//		В модуле внешней обработке необходимо создать функцию описывающую команды.		//
//                                                                               		//
//////////////////////////////////////////////////////////////////////////////////////////
// Вариант 1: Для всех источников и типов подписок
//
//	Функция ОписаниеДляPAPI() Экспорт
// 		ПараметрыРегистрации = PAPI_РаботаСВнешнимиОбработками.ОписаниеВнешнейОбработкиДляPAPI(
//								PAPI_РаботаСВнешнимиОбработками.ВидОбработкиПодписки());
//
//		ПараметрыРегистрации.Вставить("Информация", 			"Стандартные подписки на события");   
//		ПараметрыРегистрации.Вставить("БезопасныйРежим", 		Ложь);
//		ПараметрыРегистрации.Вставить("ИмяВнешнейОбработки", 	"ПодпискиНаСобытия");
//
//  	PAPI_ПодпискиНаСобытия.ДобавитьПодпискиНаСобытия(ПараметрыРегистрации, "");
//
//	КонецФункции
//
///////////////////////////////////////////////////////////////////////////////////////////////////
// Вариант 2: Подписки на событие ПередЗаписью со всеми возможными источниками
//
//	Функция ОписаниеДляPAPI() Экспорт
// 		ПараметрыРегистрации = PAPI_РаботаСВнешнимиОбработками.ОписаниеВнешнейОбработкиДляPAPI(
//											PAPI_РаботаСВнешнимиОбработками.ВидОбработкиПодписки());
//
//		ПараметрыРегистрации.Вставить("Информация", 		"Подписки на события (ПередЗаписью)");   
//		ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
//		ПараметрыРегистрации.Вставить("ИмяВнешнейОбработки","ПодпискаПередЗаписью");
//
//  	PAPI_ПодпискиНаСобытия.ДобавитьПодпискиНаСобытия(ПараметрыРегистрации, "ПередЗаписью");
//
//	КонецФункции
//
//	#Область ПодпискиНаСобытия
//
//	Процедура ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
//	
//	КонецПроцедуры
//
//	Процедура ПередЗаписью_ОбъектыБезДокументов(Источник, Отказ) Экспорт
//		
//	КонецПроцедуры
//
//	Процедура ПередЗаписью_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
//	
//	КонецПроцедуры
//
//	Процедура ПередЗаписью_Регистры(Источник, Отказ, Замещение) Экспорт
//	
//	КонецПроцедуры
//
//	#КонецОбласти
//
///////////////////////////////////////////////////////////////////////////////////////////////////
// Вариант 3: Подписки на события и команды
//
//	Функция ОписаниеДляPAPI() Экспорт
// 		ПараметрыРегистрации = PAPI_РаботаСВнешнимиОбработками.ОписаниеВнешнейОбработкиДляPAPI(
//								PAPI_РаботаСВнешнимиОбработками.ВидОбработкиСмешанная());
//
//		ПараметрыРегистрации.Вставить("Информация", 		"Смешанная обработка. Подписки и команды.");   
//		ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
//		ПараметрыРегистрации.Вставить("ИмяВнешнейОбработки","ПодпискиИКоманды");
//
//  	PAPI_ПодпискиНаСобытия.ЗаполнитьПодпискуНаСобытие(ПараметрыРегистрации.Команды.Добавить(), 
//										"ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения)", 
//										"ПередЗаписью", "ДокументОбъект"); 
//
//		// Команды
//		PAPI_РаботаСВнешнимиОбработками.ЗаполнитьПроизвольнуюКоманду(ПараметрыРегистрации.Команды.Добавить(), 
//										PAPI_РаботаСВнешнимиОбработками.ИсполняемыйТипКомандыФункция(), 
//										"ФункцияPAPI"); 
//	
//																
//		PAPI_РаботаСВнешнимиОбработками.ЗаполнитьПроизвольнуюКоманду(ПараметрыРегистрации.Команды.Добавить(), 
//										PAPI_РаботаСВнешнимиОбработками.ИсполняемыйТипКомандыПроцедура(), 
//										"ПроцедураPAPI"); 
//
//	КонецФункции
// 
//	#Область ПодпискиНаСобытия
//
//	Процедура ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
//	
//	КонецПроцедуры
//
//	#КонецОбласти
//
//	#Область ВнешниеПроцедурыИФункции   
//
//	Процедура ПроцедураPAPI(ПараметрыВыполнения) Экспорт
//	
//	КонецПроцедуры	
//
//
//	Функция ФункцияPAPI(ПараметрыВыполнения) Экспорт
//	
//	КонецФункции
//
//	#КонецОбласти
//
///////////////////////////////////////////////////////////////////////////////////////////////////
// Вариант 4: Команды
//
//	Функция ОписаниеДляPAPI() Экспорт
// 		ПараметрыРегистрации = PAPI_РаботаСВнешнимиОбработками.ОписаниеВнешнейОбработкиДляPAPI(
//								PAPI_РаботаСВнешнимиОбработками.ВидОбработкиПроизвольная());
//
//		ПараметрыРегистрации.Вставить("Информация", 		"Подписки на события (ПередЗаписью)");   
//		ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
//		ПараметрыРегистрации.Вставить("ИмяВнешнейОбработки","ПодпискаПередЗаписью");
//
//		// Команды
//		PAPI_РаботаСВнешнимиОбработками.ЗаполнитьПроизвольнуюКоманду(ПараметрыРегистрации.Команды.Добавить(), 
//										PAPI_РаботаСВнешнимиОбработками.ИсполняемыйТипКомандыФункция(), 
//										"ФункцияPAPI"); 
//	
//																
//		PAPI_РаботаСВнешнимиОбработками.ЗаполнитьПроизвольнуюКоманду(ПараметрыРегистрации.Команды.Добавить(), 
//										PAPI_РаботаСВнешнимиОбработками.ИсполняемыйТипКомандыПроцедура(), 
//										"ПроцедураPAPI"); 
//
//	КонецФункции
//
//	#Область ВнешниеПроцедурыИФункции   
//
//	Процедура ПроцедураPAPI(ПараметрыВыполнения) Экспорт
//	
//	КонецПроцедуры	
//
//
//	Функция ФункцияPAPI(ПараметрыВыполнения) Экспорт
//	
//	КонецФункции
//
//	#КонецОбласти
//
///////////////////////////////////////////////////////////////////////////////////////////////////
Функция ОписаниеВнешнейОбработкиДляPAPI(Знач ВидОбработки = "") Экспорт 
	
	Если ТипЗнч(ВидОбработки) <> Тип("Строка") Тогда  
		ВидОбработки = ВидОбработкиСмешанная();
	Иначе
		Если ПустаяСтрока(ВидОбработки) Тогда 
			ВидОбработки = ВидОбработкиСмешанная();
		КонецЕсли;
	КонецЕсли;	
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", ВидОбработки);
	ПараметрыРегистрации.Вставить("Информация", "");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("ИмяВнешнейОбработки", "");
	
	РеквизитыТабличнойЧасти = Метаданные.Справочники.PAPI_ВнешняяОбработка.ТабличныеЧасти.Команды.Реквизиты;

	ТаблицаКоманд = Новый ТаблицаЗначений;             	
	ТаблицаКоманд.Колонки.Добавить("ИсполняемыйТип",РеквизитыТабличнойЧасти.ИсполняемыйТип.Тип);
	ТаблицаКоманд.Колонки.Добавить("Наименование", 	РеквизитыТабличнойЧасти.Наименование.Тип);
	ТаблицаКоманд.Колонки.Добавить("ТипПодписки", 	РеквизитыТабличнойЧасти.ТипПодписки.Тип);
	ТаблицаКоманд.Колонки.Добавить("Источник", 		Новый ОписаниеТипов("Строка"));
    ТаблицаКоманд.Колонки.Добавить("Подписка", 		РеквизитыТабличнойЧасти.Подписка.Тип);
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд); 			
		
	Возврат ПараметрыРегистрации;
	
КонецФункции 

// Заполнить команды подписок стандартными обработчиками
//
// Параметры:
//  ПараметрыРегистрации - Структура - См. PAPI_РаботаСВнешнимиОбработками.ОписаниеВнешнейОбработкиДляPAPI
//  ТипПодписки		- ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие, Строка - Тип подписки
//  Источники		- Строка - Перечень источников через запятую. Пример: "РегистрСведенийМенеджер, ПланСчетовМенеджер, ДокументМенеджер, БизнесПроцессМенеджер"
//								Если источник не заполнен тогда будут заполнены все возможные варианты.
//								Важно: Источники должны быть верхнего уровня "ДокументОбъект", а не "ДокументОбъект.МойДокумент".
//									Детально подписка описывается в Справочнике.PAPI_ПодпискиНаСобытия в табличной части Источники
//
Процедура ДобавитьПодпискиНаСобытия(ПараметрыРегистрации, ТипПодписки, Источники = "") Экспорт 
	
	ПодсистемаПодпискиНаСобытияЕсть = Ложь;
	
	Если PAPI_ОбщегоНазначенияВызовСервера.ПодчиненнаяПодсистемаPAPIСуществует("PAPI_ВычисляемыеПодсистемы") Тогда
		PAPIВычисляемыеПодсистемы = Метаданные.Подсистемы.PAPI.Подсистемы.PAPI_ВычисляемыеПодсистемы;
		Если PAPIВычисляемыеПодсистемы.Подсистемы.Найти("PAPI_Алгоритмы") <> Неопределено Тогда 
			PAPIАлгоритмы = PAPIВычисляемыеПодсистемы.Подсистемы.PAPI_Алгоритмы;
			Если PAPIАлгоритмы.Подсистемы.Найти("PAPI_ПодпискиНаСобытия") <> Неопределено Тогда
				ПодсистемаПодпискиНаСобытияЕсть = Истина;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ПодсистемаПодпискиНаСобытияЕсть Тогда 
		PAPI_ПодпискиНаСобытия.ДобавитьПодпискиНаСобытия(ПараметрыРегистрации, ТипПодписки, Источники);
	КонецЕсли;
	
КонецПроцедуры


// Заполнить произвольную команду
//
// Параметры:
//  ТекущаяКоманда	 - СтрокаТаблицыЗначений - Строка таблицы значений "Команды". См. ОписаниеВнешнейОбработкиДляPAPI
//  ИсполняемыйТип	 - Строка - "Функция" или "Процедура" 
//  Наименование	 - Строка - Название процедуры/функции 
//
Процедура ЗаполнитьПроизвольнуюКоманду(ТекущаяКоманда, ИсполняемыйТип, Наименование) Экспорт  
	
	Если ТипЗнч(ТекущаяКоманда) = Тип("СтрокаТаблицыЗначений") Тогда
		
		ТекущаяКоманда.ИсполняемыйТип 	= ИсполняемыйТип;
		ТекущаяКоманда.Наименование 	= Наименование;	
		ТекущаяКоманда.Подписка 		= Ложь; 
		
	КонецЕсли;	    
	
КонецПроцедуры	

// Получить исходный код внешней обработки
//
// Параметры:
//  ИмяФайла			 - Строка - Полный путь к обработке. 
//  ВыполняемаяПроцедура - Строка - Процедура из внешней обработки.
//  БезопасныйРежим		 - Булево - Режим запуска обработки.
// 
// Возвращаемое значение:
//  Строка - Произвольный код, позволяющий выполнить
//
Функция ПолучитьИсходныйКодВнешнейОбработки(Знач ИмяФайла, Знач ВыполняемаяПроцедура, Знач БезопасныйРежим = Истина) Экспорт
	
	Результат = СтрШаблон("ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
				| ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
				| внОбработка = ВнешниеОбработки.Создать(""%1"", %2, ОписаниеЗащиты);
				| внОбработка.%3", ИмяФайла, ?(БезопасныйРежим, "Истина","Ложь"), ВыполняемаяПроцедура);	
	
	Возврат Результат;
	
КонецФункции	
	
#КонецОбласти


#Область ВидОбработки

// Только подписки
// 
// Возвращаемое значение:
//   Строка - имя вида внешней обработки.
//
Функция ВидОбработкиПодписки() Экспорт 
	Возврат "Подписки"; // Внутренний идентификатор.
КонецФункции	

// Только процедуры и функции
//
// Возвращаемое значение:
//   Строка - имя вида внешней обработки.
//
Функция ВидОбработкиПроизвольная() Экспорт 
	Возврат "Произвольная"; // Внутренний идентификатор.
КонецФункции

// Подписки, процедуры и функции
//
// Возвращаемое значение:
//   Строка - имя вида внешней обработки.
//
Функция ВидОбработкиСмешанная() Экспорт 
	Возврат "Смешанная"; // Внутренний идентификатор.
КонецФункции

#КонецОбласти

#Область ИсполняемыйТип
  
// Возвращаемое значение:
//   Строка - имя вида внешней обработки.
//
Функция ИсполняемыйТипКомандыФункция() Экспорт 
	Возврат "Функция"; // Внутренний идентификатор.
КонецФункции

// Возвращаемое значение:
//   Строка - имя вида внешней обработки.
//
Функция ИсполняемыйТипКомандыПроцедура() Экспорт 
	Возврат "Процедура"; // Внутренний идентификатор.
КонецФункции

#КонецОбласти



