#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область ОбработчикиПодписокНаСобытие

// При копировании объекты
//
// Параметры:
//  Источник  - БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Новый объект, который является приемником копирования. 
//  ОбъектКопирования - БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании_Объекты(Источник, ОбъектКопирования) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПриКопировании;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("ОбъектКопирования", ОбъектКопирования);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);		
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Обработка проверки заполнения
//
// Параметры:
//  Источник			 -	РегистрСведенийНаборЗаписей,
//  						РегистрБухгалтерииНаборЗаписей, 
//  						РегистрРасчетаНаборЗаписей,
//  						РегистрНакопленияНаборЗаписей, 
//  						БизнесПроцессОбъект, 
//  						ПланВидовРасчетаОбъект, 
//  						ПланСчетовОбъект, 
//  						КритерийОтбораМенеджер,
//  						ПланВидовХарактеристикОбъект, 
//  						ПоследовательностьНаборЗаписей, 
//  						ПланОбменаОбъект, 
//  						ПерерасчетНаборЗаписей, 
//  						КонстантаМенеджерЗначения, 
//  						СправочникОбъект, 
//  						ЗадачаОбъект, 
//  						ДокументОбъект 	 - Источник подписки на событие ОбработкаПроверкиЗаполнения
//  Отказ				 - 	Булево - Признак отказа от выполнения действия
//  ПроверяемыеРеквизиты - 	Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения
//
Процедура ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт 
	
	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПроверкиЗаполнения;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизиты);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью для Документов.
//
// Параметры:
//  Источник        - ДокументОбъект - Источник подписки на событие ПередЗаписью
//  Отказ           - Булево - Признак отказа от выполнения действия
//  РежимЗаписи     - РежимЗаписиДокумента - Параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект
//  РежимПроведения - РежимПроведенияДокумента - Параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект
//
Процедура ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередЗаписью;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("РежимЗаписи", РежимЗаписи);
	ПараметрыОбработчика.Вставить("РежимПроведения", РежимПроведения);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Перед записью объекты без документов
//
// Параметры:
//  Источник  - БизнесПроцессОбъект,
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект - Источник подписки на событие ПередЗаписью.
//  Отказ     - Булево - Признак отказа от выполнения действия.
//
Процедура ПередЗаписью_ОбъектыБезДокументов(Источник, Отказ) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередЗаписью;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Перед записью регистр расчета набор записей
//
// Параметры:
//  Источник        - РегистрРасчетаНаборЗаписей - набор записей, передаваемый
//                 	  в подписку на событие ПередЗаписью.
//  Отказ           - Булево - Признак отказа от выполнения действия.
//  Замещение      	- Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//  ТолькоЗапись    - Булево - Признак того, что при записи набора выполняется
//					 только запись набора записей без пересчета фактического периода действия и без обновления перерасчетов.
//  ЗаписьФактическогоПериодаДействия	 - Булево - Признак того, что при записи набора выполняется расчет фактического периода действия. 
//  ЗаписьПерерасчетов					 - Булево - Признак того, что при записи набора выполняется запись перерасчетов регистра. 
//
Процедура ПередЗаписью_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередЗаписью;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("Замещение", Замещение);
	ПараметрыОбработчика.Вставить("ТолькоЗапись", ТолькоЗапись);
	ПараметрыОбработчика.Вставить("ЗаписьФактическогоПериодаДействия", ЗаписьФактическогоПериодаДействия);
	ПараметрыОбработчика.Вставить("ЗаписьПерерасчетов", ЗаписьПерерасчетов);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Перед записью регистры
//
// Параметры:
//  Источник	 -  РегистрСведенийНаборЗаписей, 
//					РегистрБухгалтерииНаборЗаписей, 
//					РегистрНакопленияНаборЗаписей, 
//					ПоследовательностьНаборЗаписей, 
//					ПерерасчетНаборЗаписей	 - 
//  Отказ		 - Булево - Признак отказа от выполнения действия.
//  Замещение    - Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//
Процедура ПередЗаписью_Регистры(Источник, Отказ, Замещение) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередЗаписью;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("Замещение", Замещение);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// При записи объекты
//
// Параметры:
//  Источник - 	БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект	 - Источник подписки на событие ПриЗаписи
//  Отказ	 -  Булево - Признак отказа от выполнения действия.
//
Процедура ПриЗаписи_Объекты(Источник, Отказ) Экспорт  

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПриЗаписи;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// При записи регистр расчета набор записей
//
// Параметры:
//  Источник							- РегистрРасчетаНаборЗаписей - Источник подписки на событие ПриЗаписи 
//  Отказ	 							- Булево - Признак отказа от выполнения действия.
//  Замещение    						- Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//  ТолькоЗапись    - Булево - Признак того, что при записи набора выполняется
//					 только запись набора записей без пересчета фактического периода действия и без обновления перерасчетов.
//  ЗаписьФактическогоПериодаДействия	- Булево - Признак того, что при записи набора выполняется расчет фактического периода действия. 
//  ЗаписьПерерасчетов					- Булево - Признак того, что при записи набора выполняется запись перерасчетов регистра.
//
Процедура ПриЗаписи_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПриЗаписи;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("Замещение", Замещение);
	ПараметрыОбработчика.Вставить("ТолькоЗапись", ТолькоЗапись);
	ПараметрыОбработчика.Вставить("ЗаписьФактическогоПериодаДействия", ЗаписьФактическогоПериодаДействия);
	ПараметрыОбработчика.Вставить("ЗаписьПерерасчетов", ЗаписьПерерасчетов);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// При записи регистры
//
// Параметры:
//  Источник	- РегистрСведенийНаборЗаписей, 
//				  РегистрБухгалтерииНаборЗаписей, 
//				  РегистрНакопленияНаборЗаписей, 
//				  ПоследовательностьНаборЗаписей, 
//				  ПерерасчетНаборЗаписей - Источник подписки на событие ПриЗаписи 
//  Отказ	 	- Булево - Признак отказа от выполнения действия.
//  Замещение   - Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//
Процедура ПриЗаписи_Регистры(Источник, Отказ, Замещение) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПроверкиЗаполнения;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("Замещение", Замещение);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Перед удалением объекты
//
// Параметры:
//  Источник -  БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Источник подписки на событие ПередУдалением
//  Отказ	 -  Булево - Признак отказа от выполнения действия.
//
Процедура ПередУдалением_Объекты(Источник, Отказ) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередУдалением;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Обработка проведения документы
//
// Параметры:
//  Источник		- ДокументОбъект - Источник подписки на событие ОбработкаПроведения
//  Отказ           - Булево - Признак отказа от выполнения действия
//  РежимПроведения - РежимПроведенияДокумента - Параметр, передаваемый в подписку на событие ОбработкаПроведения,
//                    когда Источник это ДокументОбъект
//
Процедура ОбработкаПроведения_Документы(Источник, Отказ, РежимПроведения) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПроведения;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	ПараметрыОбработчика.Вставить("РежимПроведения", РежимПроведения);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Обработка удаления проведения документы обработка
//
// Параметры:
//  Источник - ДокументОбъект - Источник подписки на событие ОбработкаУдаленияПроведения 
//  Отказ    - Булево - Признак отказа от выполнения действия 
//
Процедура ОбработкаУдаленияПроведения_ДокументыОбработка(Источник, Отказ) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаУдаленияПроведения;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("Отказ", Отказ);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Обработка формирования по версии истории данных объекты и константа менеджер
//
// Параметры:
//  Источник			 -  БизнесПроцессОбъект, 
//							ПланВидовРасчетаОбъект, 
//							ПланСчетовОбъект, 
//							ПланВидовХарактеристикОбъект, 
//							ПланОбменаОбъект, 
//							КонстантаМенеджерЗначения, 
//							СправочникОбъект, 
//							ЗадачаОбъект, 
//							ДокументОбъект	-  Источник подписки на событие ОбработкаФормированияПоВерсииИсторииДанных 
//  ДанныеВерсии		 -  ФиксированнаяСтруктура - Фиксированная структура с данными версии, по которой выполняется формирование
//  НомерВерсии			 - 	Число - Номер версии, по которой выполняется формирование
//  ИсключитьДанные		 - 	Массив - Массив с именами полей и табличных частей, которые будут исключены из стандартной обработки.
//  СтандартнаяОбработка - 	Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаФормированияПоВерсииИсторииДанных_Объекты(Источник, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаФормированияПоВерсииИсторииДанных;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("ДанныеВерсии", ДанныеВерсии);
	ПараметрыОбработчика.Вставить("НомерВерсии", НомерВерсии);
	ПараметрыОбработчика.Вставить("ИсключитьДанные", ИсключитьДанные);
	ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);

КонецПроцедуры

// Обработка формирования по версии истории данных регистр сведений
//
// Параметры:
//  Источник			 -  РегистрСведенийНаборЗаписей - Источник подписки на событие ОбработкаФормированияПоВерсииИсторииДанных
//  ДанныеВерсии		 -  ФиксированнаяСтруктура - Фиксированная структура с данными версии, по которой выполняется формирование
//  НомерВерсии			 - 	Число - Номер версии, по которой выполняется формирование
//  КлючЗаписи			 - 	РегистрСведенийКлючЗаписи - Ключ записи регистра сведений.
//  ИсключитьДанные		 - 	Массив - Массив с именами полей и табличных частей, которые будут исключены из стандартной обработки. 
//  СтандартнаяОбработка - 	Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события. 
//
Процедура ОбработкаФормированияПоВерсииИсторииДанных_РегистрСведений(Источник, ДанныеВерсии, НомерВерсии, КлючЗаписи, ИсключитьДанные, СтандартнаяОбработка) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаФормированияПоВерсииИсторииДанных;
	Если Не НужноОбрабатыватьПодписку(Источник, Событие) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("ДанныеВерсии", ДанныеВерсии);
	ПараметрыОбработчика.Вставить("НомерВерсии", НомерВерсии);
	ПараметрыОбработчика.Вставить("КлючЗаписи", КлючЗаписи);
	ПараметрыОбработчика.Вставить("ИсключитьДанные", ИсключитьДанные);
	ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

// Обработка после записи версий истории данных
//
// Параметры:
//  Источник				 -  РегистрСведенийМенеджер, 
//								ПланСчетовМенеджер, 
//								ДокументМенеджер, 
//								БизнесПроцессМенеджер, 
//								ПланВидовРасчетаМенеджер, 
//								ЗадачаМенеджер, 
//								ПланВидовХарактеристикМенеджер, 
//								СправочникМенеджер - Источник подписки на событие ОбработкаПослеЗаписиВерсийИсторииДанных
//  ИнформацияОЗаписиВерсий	 - КоллекцияИнформацииОЗаписиВерсииИсторииДанных - Содержит информацию о записи версий истории данных
//
Процедура ОбработкаПослеЗаписиВерсийИсторииДанных(Источник, ИнформацияОЗаписиВерсий) Экспорт

	Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПослеЗаписиВерсийИсторииДанных;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Источник", Источник);
	ПараметрыОбработчика.Вставить("ИнформацияОЗаписиВерсий", ИнформацияОЗаписиВерсий);
	
	ИсполнитьВсеОбоработчикиСобытияОбъекта(
		Источник, 
		Событие,
		ПараметрыОбработчика
	);
	
	Выполнить ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс


#Область ВнешниеОбработки

// Заполнить команды подписок стандартными обработчиками
//
// Параметры:
//  ПараметрыРегистрации - Структура - См. PAPI_РаботаСВнешнимиОбработками.ОписаниеВнешнейОбработкиДляPAPI
//  ТипПодписки		- ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие, Строка - Тип подписки
//  Источники		- Строка - Перечень источников через запятую. Пример: "РегистрСведенийМенеджер, ПланСчетовМенеджер, ДокументМенеджер, БизнесПроцессМенеджер"
//								Если источник не заполнен тогда будут заполнены все возможные варианты.
//								Важно: Источники должны быть верхнего уровня "ДокументОбъект", а не "ДокументОбъект.МойДокумент".
//									Детально подписка описывается в Справочнике.PAPI_ПодпискиНаСобытия в табличной части Источники
//
Процедура ДобавитьПодпискиНаСобытия(ПараметрыРегистрации, ТипПодписки, Источники = "") Экспорт 
	
	Если ТипЗнч(ТипПодписки) = Тип("ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие") Тогда 
		ТипПодпискиСтрокой 	= ПолучитьТипПодпискиСтрокой(ТипПодписки);
	Иначе
		ТипПодпискиСтрокой 	= ТипПодписки; 
    КонецЕсли;
		
	Если ПустаяСтрока(Источники) Тогда 
		МассивИсточников 	= ПолучитьВсеИсточники(ТипПодпискиСтрокой);
	Иначе	
		Источники 			= СтрЗаменить(Источники, " ", "");
		МассивИсточников 	= СтрРазделить(Источники, ",", Ложь);	
	КонецЕсли;
		
	МассивСтруктурКомандПодписок = СоответствиеНаименованияКомандПодписки(ТипПодпискиСтрокой, МассивИсточников);
	
	Для Каждого элМассива Из МассивСтруктурКомандПодписок Цикл 
	
		ЗаполнитьЗначенияСвойств(ПараметрыРегистрации.Команды.Добавить(), элМассива);
		
	КонецЦикла;
	
КонецПроцедуры	

// Получить все источники если тип подписки пустой
//
// Параметры:
//  ТипПодписки	 - Строка - Тип подписки. Пример: "ПриКопировании"
// 
// Возвращаемое значение:
//  Массив - Перечень всех источников если тип не указан или пустой массив если тип указан.
//
Функция ПолучитьВсеИсточники(Знач ТипПодписки = "") Экспорт
	
	МассивИсточников = Новый Массив;
		
	Если ПустаяСтрока(ТипПодписки) Тогда  
		
		Макет = Справочники.PAPI_ПодпискиНаСобытия.ПолучитьМакет("СхемаПодписок"); 
		
	// Забираем источники ++
		КолонкаШапки 	= "C1";
		НомерСтроки 	= 2;
		НаименованиеИсточника = Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0")+ КолонкаШапки).Текст;     
		СоответствиеКолонок = Новый Соответствие;
		Пока Не ПустаяСтрока(НаименованиеИсточника) Цикл
			
			МассивИсточников.Добавить(НаименованиеИсточника);
			
			НомерСтроки 			= НомерСтроки + 1;	
			НаименованиеИсточника 	= Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0")+ КолонкаШапки).Текст; 
			
		КонецЦикла;
	// Забираем колонки --

	КонецЕсли;	
	
	Возврат МассивИсточников;
	
КонецФункции	

// Получить источники по типу
//
// Параметры:
//  ТипПодписки	 - Строка - Тип подписки. Пример: "ПриКопировании"
// 
// Возвращаемое значение:
//  Массив - Перечень всех источников если тип не указан или источники конкретного типа.
//
Функция ПолучитьИсточникиПоТипу(Знач ТипПодписки = "") Экспорт 
	
	Если ТипЗнч(ТипПодписки) = Тип("Строка") Тогда 
		ТипПодпискиСтрокой = ТипПодписки;
	Иначе
		ТипПодпискиСтрокой = ПолучитьТипПодпискиСтрокой(ТипПодписки);
	КонецЕсли;	
	
	Если ПустаяСтрока(ТипПодпискиСтрокой) Тогда
		Возврат ПолучитьВсеИсточники("");
	Иначе

		ПоПодписке = ?(ПустаяСтрока(ТипПодпискиСтрокой), Ложь, Истина);
			
		МассивИсточников = Новый Массив;
			
		Макет = Справочники.PAPI_ПодпискиНаСобытия.ПолучитьМакет("СхемаПодписок"); 	

	// Забираем колонки ++
		СтрокаШапка			= "R1";
		НомерКолонки 		= 2;
		КолонкаЗаполнена 	= ЗначениеЗаполнено(Макет.Область(СтрокаШапка + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0")).Текст);     
		СоответствиеКолонок = Новый Соответствие;
		Пока КолонкаЗаполнена Цикл
			
			НаименованиеКолонки = Макет.Область(СтрокаШапка + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0")).Текст;
			Если ПоПодписке Тогда 
				Если ВРег(ТипПодпискиСтрокой) = ВРег(НаименованиеКолонки) Тогда 	
					СоответствиеКолонок.Вставить(НаименованиеКолонки, НомерКолонки);				
				КонецЕсли;
			Иначе 
				СоответствиеКолонок.Вставить(НаименованиеКолонки, НомерКолонки);	
			КонецЕсли; 	
			
			НомерКолонки = НомерКолонки + 1;	
			КолонкаЗаполнена = ЗначениеЗаполнено(Макет.Область(СтрокаШапка + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0")).Текст); 
			
		КонецЦикла;
	// Забираем колонки --
		
		НомерСтроки 		= 2; 
		КолонкаИсточников	= "C1";
		СтрокаЗаполнена 	= ЗначениеЗаполнено(Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаИсточников).Текст);
		Пока СтрокаЗаполнена Цикл 
			
			НаименованиеИсточника = Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаИсточников).Текст;
			
			Для Каждого текКолонка Из СоответствиеКолонок Цикл 
					
				текКоманда = СокрЛП(Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + "C" + Формат(текКолонка.Значение, "ЧН=0; ЧГ=0")).Текст); 
				
				ВМассиве = ?(МассивИсточников.Количество() > 0, МассивИсточников.Найти(НаименованиеИсточника), Неопределено);
				
				Если ВМассиве = Неопределено 
					И СтрДлина(ТекКоманда) > 3 Тогда  // Если x, 1 или x1 значит проходим   	
					
					МассивИсточников.Добавить(НаименованиеИсточника);
						
				КонецЕсли;	
					
			КонецЦикла;	  
			
			НомерСтроки = НомерСтроки + 1;	
			СтрокаЗаполнена = ЗначениеЗаполнено(Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаИсточников).Текст);  
			
		КонецЦикла;	
		
		Возврат МассивИсточников;		
				
	КонецЕсли;
		
КонецФункции	
	
// Получить соответствие наименование команд подписки
//
// Параметры:
//  ТипПодписки		 - Строка - Тип подписки. Пример: "ПриКопировании"
//  МассивИсточников - Массив - Источники подписки
// 
// Возвращаемое значение:
//   Массив - Массив содержит структуру команд. См. Справочник.PAPI_ВнешняяОбработка.ТабличныеЧасти.Команды 
//
Функция СоответствиеНаименованияКомандПодписки(Знач ТипПодписки = "", Знач МассивИсточников) Экспорт
	
	Если ТипЗнч(ТипПодписки) = Тип("Строка") Тогда 
		ТипПодпискиСтрокой = ТипПодписки;
	Иначе
		ТипПодпискиСтрокой = ПолучитьТипПодпискиСтрокой(ТипПодписки);
	КонецЕсли;			
	
	ВсеПодписки = Перечисления.PAPI_ТипПодпискиНаСобытие.ВсеЗначенияСоответствием();
	
	ПоПодписке = ?(ПустаяСтрока(ТипПодпискиСтрокой), Ложь, Истина);
		
	Результат = Новый Массив;
		
	Макет = Справочники.PAPI_ПодпискиНаСобытия.ПолучитьМакет("СхемаПодписок"); 	

// Забираем колонки ++
	СтрокаШапка			= "R1";
	НомерКолонки 		= 2;
	КолонкаЗаполнена 	= ЗначениеЗаполнено(Макет.Область(СтрокаШапка + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0")).Текст);     
	СоответствиеКолонок = Новый Соответствие;
	Пока КолонкаЗаполнена Цикл
		
		НаименованиеКолонки = Макет.Область(СтрокаШапка + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0")).Текст;
		Если ПоПодписке Тогда 
			Если ВРег(ТипПодпискиСтрокой) = ВРег(НаименованиеКолонки) Тогда 	
				СоответствиеКолонок.Вставить(НаименованиеКолонки, НомерКолонки);				
			КонецЕсли;
		Иначе 
			СоответствиеКолонок.Вставить(НаименованиеКолонки, НомерКолонки);	
		КонецЕсли; 	
		
		НомерКолонки = НомерКолонки + 1;	
		КолонкаЗаполнена = ЗначениеЗаполнено(Макет.Область(СтрокаШапка + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0")).Текст); 
		
	КонецЦикла;
// Забираем колонки --

	ИсполняемыйТип = PAPI_РаботаСВнешнимиОбработками.ИсполняемыйТипКомандыПроцедура();

	НомерСтроки 		= 2; 
	КолонкаИсточников	= "C1";
	СтрокаЗаполнена 	= ЗначениеЗаполнено(Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаИсточников).Текст);
	Пока СтрокаЗаполнена Цикл 
		
		НаименованиеИсточника = Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаИсточников).Текст;
		
		ВМассиве = ?(МассивИсточников.Количество() > 0, МассивИсточников.Найти(НаименованиеИсточника), Истина);
		
		Если ВМассиве <> Неопределено Тогда 

			Для Каждого текКолонка Из СоответствиеКолонок Цикл 
				
				текКоманда = СокрЛП(Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + "C" + Формат(текКолонка.Значение, "ЧН=0; ЧГ=0")).Текст);
				Если СтрДлина(ТекКоманда) > 3 Тогда  // Если x, 1 или x1 значит проходим   
							
					текСоответствие = ВсеПодписки[текКолонка.Ключ];
					Результат.Добавить(Новый Структура("ИсполняемыйТип, Наименование, ТипПодписки, Источник, Подписка, Событие",
						ИсполняемыйТип, 
						текКоманда, 
						текКолонка.Ключ, 
						НаименованиеИсточника, 
						Истина,
						?(текСоответствие <> Неопределено, текСоответствие, Перечисления.PAPI_ТипПодпискиНаСобытие.ПустаяСсылка())));
					
				КонецЕсли;	
				
			КонецЦикла;	  
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;	
		СтрокаЗаполнена = ЗначениеЗаполнено(Макет.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаИсточников).Текст);  
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

// Получить тип подписки строкой
//
// Параметры:
//  ТипПодпискиНаСобытие - ПеречисленияСсылка.PAPI_ТипПодпискиНаСобытие	 - Тип подписки
// 
// Возвращаемое значение:
//  Строка - Пример: XMLСтрока(Перечисления.PAPI_ТипПодпискиНаСобытие.ПередЗаписью), Вернется "ПередЗаписью" 
//
Функция ПолучитьТипПодпискиСтрокой(Знач ТипПодпискиНаСобытие) Экспорт 
	
	Возврат XMLСтрока(ТипПодпискиНаСобытие);
	
КонецФункции	

// Заполнить произвольную команду
//
// Параметры:
//  ТекущаяКоманда	- СтрокаТаблицыЗначений - Строка таблицы значений "Команды". См. ОписаниеВнешнейОбработкиДляPAPI
//  Наименование	- Строка - Название процедуры с параметрами. Пример: "ПередЗаписью_Регистры(Источник, Отказ, Замещение)"
//  ТипПодписки     - ПеречислениеСсылка.PAPI_ТипПодпискиНаСобытие, Строка - Тип подписки
//  Источник		- Строка - Перечень источников через запятую. Пример: "ДокументМенеджер"
//
Процедура ЗаполнитьПодпискуНаСобытие(ТекущаяКоманда, Наименование, ТипПодписки, Источник) Экспорт  
	
	Если ТипЗнч(ТекущаяКоманда) = Тип("СтрокаТаблицыЗначений") Тогда  
		
		ВсеПодписки = Перечисления.PAPI_ТипПодпискиНаСобытие.ВсеЗначенияСоответствием();
		текСоответствие = ВсеПодписки[ТипПодписки];
		
		ТекущаяКоманда.ИсполняемыйТип 	= PAPI_РаботаСВнешнимиОбработками.ИсполняемыйТипКомандыПроцедура();
		ТекущаяКоманда.Наименование 	= Наименование;
		ТекущаяКоманда.ТипПодписки 		= ТипПодписки;
		ТекущаяКоманда.Источник 		= Источник;
		ТекущаяКоманда.Событие	 		= ?(текСоответствие <> Неопределено, 
											текСоответствие, 
											Перечисления.PAPI_ТипПодпискиНаСобытие.ПустаяСсылка()); 
			
		ТекущаяКоманда.Подписка 		= 1;
		
	КонецЕсли;	    
	
КонецПроцедуры

// Имя объекта метаданных
//
// Параметры:
//  ИсточникПодписки - Строка - Например: "СправочникОбъект" 
// 
// Возвращаемое значение:
//  Строка - "Справочники"
//
Функция ИмяОбъектаМетаданных(Знач ИсточникПодписки = "") Экспорт
	
	Результат = ИсточникПодписки;
	Результат = СтрЗаменить(Результат,"Объект",				"");
	Результат = СтрЗаменить(Результат,"МенеджерЗначения",	"");
	Результат = СтрЗаменить(Результат,"Менеджер",			"");
	Результат = СтрЗаменить(Результат,"НаборЗаписей",		"");
	
	Если Врег(Результат) = ВРег("Справочник") Тогда 
		
		Результат = "Справочники";
		
	ИначеЕсли Врег(Результат) = ВРег("Документ") Тогда	
		
		Результат = "Документы";  

	ИначеЕсли Врег(Результат) = ВРег("ПланВидовХарактеристик") Тогда	
		
		Результат = "ПланыВидовХарактеристик";

	ИначеЕсли Врег(Результат) = ВРег("ПланСчетов") Тогда	
		
		Результат = "ПланыСчетов";
		
	ИначеЕсли Врег(Результат) = ВРег("ПланВидовРасчета") Тогда	
		
		Результат = "ПланыВидовРасчета";
	
	ИначеЕсли Врег(Результат) = ВРег("БизнесПроцесс") Тогда	
		
		Результат = "БизнесПроцессы";

	ИначеЕсли Врег(Результат) = ВРег("Задача") Тогда	
		
		Результат = "Задачи";

	ИначеЕсли Врег(Результат) = ВРег("ПланОбмена") Тогда	
		
		Результат = "ПланыОбмена";
		
	ИначеЕсли Врег(Результат) = ВРег("РегистрСведений") Тогда	
		
		Результат = "РегистрыСведений";		
		
	ИначеЕсли Врег(Результат) = ВРег("РегистрНакопления") Тогда	
		
		Результат = "РегистрыНакопления";			
		
	ИначеЕсли Врег(Результат) = ВРег("РегистрБухгалтерии") Тогда	
		
		Результат = "РегистрыБухгалтерии";

	ИначеЕсли Врег(Результат) = ВРег("РегистрРасчета") Тогда	
		
		Результат = "РегистрыРасчета";

	ИначеЕсли Врег(Результат) = ВРег("Перерасчет") Тогда	
		
		Результат = "Перерасчеты";

	ИначеЕсли Врег(Результат) = ВРег("Перечисление") Тогда	
		
		Результат = "Перечисления";		

	ИначеЕсли Врег(Результат) = ВРег("Отчет") Тогда	
		
		Результат = "Отчеты";			

	ИначеЕсли Врег(Результат) = ВРег("Обработка") Тогда	
		
		Результат = "Обработки";				
		
	ИначеЕсли Врег(Результат) = ВРег("ЖурналДокументов") Тогда	
		
		Результат = "ЖурналыДокументов";

	ИначеЕсли Врег(Результат) = ВРег("Константа") Тогда	
		
		Результат = "Константы";

	ИначеЕсли Врег(Результат) = ВРег("КритерийОтбора") Тогда	
		
		Результат = "КритерииОтбора";

	ИначеЕсли Врег(Результат) = ВРег("Последовательность") Тогда	
		
		Результат = "Последовательности"; 
		
	ИначеЕсли Врег(Результат) = ВРег("ХранилищеНастроек") Тогда	
		
		Результат = "ХранилищаНастроек";
			
	Иначе
		
		Результат = "";
		
	КонецЕсли;	
		
	Возврат Результат;
	
КонецФункции  

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Дополнительные функции для подписок.


// Собираем соответствие на основании пришедших данных из Обработка после записи версий истории данных
//
// Параметры:
//  Источник				 -  РегистрСведенийМенеджер, 
//								ПланСчетовМенеджер, 
//								ДокументМенеджер, 
//								БизнесПроцессМенеджер, 
//								ПланВидовРасчетаМенеджер, 
//								ЗадачаМенеджер, 
//								ПланВидовХарактеристикМенеджер, 
//								СправочникМенеджер - Источник подписки на событие ОбработкаПослеЗаписиВерсийИсторииДанных
//  ИнформацияОЗаписиВерсий	 - КоллекцияИнформацииОЗаписиВерсииИсторииДанных - Содержит информацию о записи версий истории данных
//
// Возвращаемое значение:
//  СоответствиеДанных - Соответствие  
//		Ключ - Данные, по которым создана версия.
//		Значение - Структура:
// 			Данные - Данные, по которым создана версия.
// 			ДанныеВерсии - Данные последней версии из обработки (аналогично ПолучитьДанныеВерсии)
// 			ТипДанных - Текстовое представление типа данных
// 			НачальнаяВерсия - Если несколько версий по одним данным то записываем самый младший номер версии
// 			ПоследняяВерсия - Если несколько версий по одним данным то записываем самый старший номер версии   
// 			ВидИзменения - Текстовое представление вида изменений. Может принимать следующие значения: "Добавление", "Изменение", "Удаление"
// 			МассивВерсий - Массив содержит все версии в разрезе Данные
// 			ИзмененныеЭлементы - Измененные свойства Данных (аналогично разницы между версиями ПолучитьРазличияВерсий).
//
Функция СоответствиеНаОснованииОбработкаПослеЗаписиВерсийИсторииДанных(Знач Источник, Знач ИнформацияОЗаписиВерсий) Экспорт
	
	// Структура для дальнейшей обработки данных  
	КлючиСтруктуры = "Данные, ДанныеВерсии, ТипДанных, НачальнаяВерсия, ПоследняяВерсия, ВидИзменения, МассивВерсий, ИзмененныеЭлементы";
	
	// Соответствии содержит данные и версию для удаления
	СоответствиеДанных = Новый Соответствие; 
	
	// Данные заполнения
	ТекДанные = Новый Структура;
	Для Каждого ТекущаяЗапись Из ИнформацияОЗаписиВерсий Цикл
		
		// Если действия выполнены добавляем в список удаляемых
		Если СоответствиеДанных[ТекущаяЗапись.Данные] = Неопределено Тогда 
			СтруктураДанных = Новый Структура(КлючиСтруктуры,
					ТекущаяЗапись.Данные, 
					ТекущаяЗапись.ДанныеВерсии,
					PAPI_ОбщегоНазначенияВызовСервера.ИмяТаблицыПоСсылке(ТекущаяЗапись.Данные),
					ТекущаяЗапись.НомерВерсии, 
					ТекущаяЗапись.НомерВерсии, 
					Строка(ТекущаяЗапись.ВидИзмененияДанных),  
					Новый Массив,
					Новый Соответствие);
					
			// Полная версия
			Если ТекущаяЗапись.НомерВерсии = 1 Тогда 
				Если СтруктураДанных.ВидИзменения <> "Добавление" Тогда 
					СтруктураДанных.Вставить("ВидИзменения", "Добавление"); 	
				КонецЕсли;    	
			КонецЕсли;	
					
			СоответствиеДанных.Вставить(ТекущаяЗапись.Данные, СтруктураДанных);	
			
			ТекДанные = СоответствиеДанных[ТекущаяЗапись.Данные];  
			
		КонецЕсли;	
		
		ТекДанные.Вставить("ПоследняяВерсия", ТекущаяЗапись.НомерВерсии);
		ТекДанные.МассивВерсий.Добавить(ТекущаяЗапись.НомерВерсии);

		Если СтруктураДанных.ВидИзменения = "Добавление" Тогда 
			Продолжить;
		КонецЕсли;	
			
		ТекДанные.Вставить("ДанныеВерсии", ТекущаяЗапись.ДанныеВерсии);
			
		Для Каждого элСтруктуры Из ТекущаяЗапись.РазличияВерсий Цикл		
				
				// Собираем список измененных элементов объекта
			Если ТекДанные.ИзмененныеЭлементы[элСтруктуры.Ключ] = Неопределено Тогда
				ТекДанные.ИзмененныеЭлементы.Вставить(элСтруктуры.Ключ,элСтруктуры.Ключ);	
			КонецЕсли;	

		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат СоответствиеДанных;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции. 


// Структура настроек подписки
//
// Параметры:
//  Настройки - ХранилищеЗначения
// 
// Возвращаемое значение:
//  СтруктураДанных - Структура 
//
Функция СтруктураНастроекПодписки(Знач Настройки) Экспорт

	СтруктураДанных = Новый Структура;
	
	Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
		перСтруктураНастройки = Настройки.Получить();
			
		Если перСтруктураНастройки <> Неопределено Тогда
			
			РезультатXML 		= PAPI_ОбщегоНазначенияВызовСервера.ДесериализаторXML(перСтруктураНастройки);	
			СтруктураНастройки 	= ?(РезультатXML.Отработал, РезультатXML.Результат, Неопределено);
			
			Если СтруктураНастройки <> Неопределено Тогда 
				Если ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
					
#Область ЗаполняемСтруктуруДанных
					Если СтруктураНастройки.Свойство("СтруктураПодписки") Тогда 
							
						СтруктураПодписки = СтруктураНастройки.СтруктураПодписки;
							
						Если ТипЗнч(СтруктураПодписки) = Тип("Структура") Тогда
								
							Если СтруктураПодписки.Свойство("КодПодписки") Тогда
									
								СтруктураДанных.Вставить("СП_КодПодписки", СтруктураПодписки.КодПодписки); 							
									
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;			
#КонецОбласти					
					
				КонецЕсли; 
			КонецЕсли; 
				
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат СтруктураДанных;

КонецФункции		

// Полное имя метаданных источника
//
// Параметры:
//  Источник - ЛюбойОбъект - Источник конкретной подписки
// 
// Возвращаемое значение:
//  Результат - Строка - Пример: "Документ.PAPI_ВходящийЗапрос"
//
Функция ПолноеИмяМетаданныхИсточника(Знач Источник) Экспорт 
	Возврат Источник.Метаданные().ПолноеИмя();	
КонецФункции	

// Преобразование источника под тип подписки
//
// Параметры:
//  Источник 	- Строка - Пример: "Документ.PAPI_ВходящийЗапрос"
//  ТипОбъекта 	- Строка - Пример: "Объект"
// 
// Возвращаемое значение:
//  Результат - Массив - Массив содержит головной элемент и текущий. 
//
Функция ПреобразованиеИсточникаПодТипПодписки(Знач Источник, Знач ТипОбъекта) Экспорт  
	
	Результат = Новый Массив;
	
    МассивРазделенныхЭлементов = СтрРазделить(Источник, ".", Истина);  
	Если МассивРазделенныхЭлементов.Количество() >= 1 Тогда 
		
		// Головной элемент   
		Если Врег(МассивРазделенныхЭлементов[0]) = Врег("Константа") Тогда 
			Результат.Добавить("КонстантаМенеджерЗначения"); // Константа
		Иначе	
			Результат.Добавить(МассивРазделенныхЭлементов[0] + ТипОбъекта);	
		КонецЕсли;	
			
		Если МассивРазделенныхЭлементов.Количество() > 1 Тогда 	
			// Текущий элемент
			Результат.Добавить(Результат[0] + "." + МассивРазделенныхЭлементов[1]);
		КонецЕсли; 
		
	КонецЕсли;	
	
    Возврат Результат;
	
КонецФункции

// Получить массив выполняемых команд
//
// Параметры:
//  Источник		 - ЛюбоеЗначение - Источник подписок
//  ПараметрыТекст	 - Строка - Параметры процедур Пример: "(Источник, Отказ, РежимЗаписи, РежимПроведения)"
//	Событие 		 - Строка - Событие подписки. См. Перечисление.PAPI_ТипПодпискиНаСобытие 
//  ТипОбъекта		 - Строка - Дополнительная информация к типу. 
//  ПолноеИмяМетаданных - Строка - Имя метаданных. Пример: "Документ.PAPI_ВходящийЗапрос" 
//
// Возвращаемое значение:
//  МассивВыполняемыхКоманд - Массив структур содержит команды
//
Функция МассивВыполняемыхКоманд(Знач Источник, Знач ПараметрыТекст, Знач Событие = "", Знач ТипОбъекта = "Объект", Знач ПолноеИмяМетаданных = "") Экспорт 
	
	МассивВыполняемыхКоманд = Новый Массив;
	
	Если ПустаяСтрока(Событие) Тогда 
		Возврат МассивВыполняемыхКоманд;
	КонецЕсли;
	
	Если ПустаяСтрока(ПолноеИмяМетаданных) Тогда 
		ПолноеИмяМетаданных = ПолноеИмяМетаданныхИсточника(Источник);
	КонецЕсли;
	
	МассивИсточников = ПреобразованиеИсточникаПодТипПодписки(ПолноеИмяМетаданных, ТипОбъекта);	
	
	Если ЗначениеЗаполнено(МассивИсточников) Тогда
		
		ПараметрыПодписки = Новый Структура("МассивИсточников, Событие", 
											МассивИсточников,
											ПредопределенноеЗначение("Перечисление.PAPI_ТипПодпискиНаСобытие." + Событие));  									
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОтбораПодписокНаСобытие(); 
					
		Запрос.УстановитьПараметр("МассивИсточников", 	ПараметрыПодписки.МассивИсточников);
		Запрос.УстановитьПараметр("Событие", 			ПараметрыПодписки.Событие);
		Запрос.УстановитьПараметр("Источник", 			ПараметрыПодписки.МассивИсточников[0]);
		Запрос.УстановитьПараметр("ТипПодписки", 		Событие);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
				
			Если ВыборкаДетальныеЗаписи.ТипВыполнения = Перечисления.PAPI_ТипВыполнения.Произвольный Тогда 
				
				СтруктураНастройки = СтруктураНастроекПодписки(ВыборкаДетальныеЗаписи.Настройки);

				Если СтруктураНастройки.Свойство("СП_КодПодписки") 
					И Не ПустаяСтрока(СтруктураНастройки.СП_КодПодписки) Тогда
												
					МассивВыполняемыхКоманд.Добавить(СтруктураКоманды(СтруктураНастройки.СП_КодПодписки, ВыборкаДетальныеЗаписи.ТипВыполнения, ""));
										
				КонецЕсли;
				
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипВыполнения = Перечисления.PAPI_ТипВыполнения.Алгоритм Тогда
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Алгоритм) Тогда 

					МассивВыполняемыхКоманд.Добавить(СтруктураКоманды("", ВыборкаДетальныеЗаписи.ТипВыполнения, ВыборкаДетальныеЗаписи.Алгоритм));
					
				КонецЕсли; 
													
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипВыполнения = Перечисления.PAPI_ТипВыполнения.ВнешняяОбработка Тогда
				
				Если  Не ПустаяСтрока(ВыборкаДетальныеЗаписи.ИмяФайла) 
					И Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Наименование) Тогда   
					
					ВыполняемаяПроцедура = ВыборкаДетальныеЗаписи.Наименование;
					
					Если СтрНайти(ВыполняемаяПроцедура, "(") = 0 Тогда 	
						ВыполняемаяПроцедура = ВыполняемаяПроцедура + "(" + ПараметрыТекст + ")";
					КонецЕсли;	  
										
					ИсполняемыйКод = PAPI_РаботаСВнешнимиОбработками.ПолучитьИсходныйКодВнешнейОбработки(
									ВыборкаДетальныеЗаписи.ИмяФайла, ВыполняемаяПроцедура, ВыборкаДетальныеЗаписи.БезопасныйРежим); 						
							 
					МассивВыполняемыхКоманд.Добавить(СтруктураКоманды(ИсполняемыйКод, ВыборкаДетальныеЗаписи.ТипВыполнения));
					
				КонецЕсли;	
													
			Иначе
				// Тип не задан, пропускаем
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли; 
	
	Возврат МассивВыполняемыхКоманд;
	
КонецФункции	

// Возвращает имена параметров обработчиков для заданного объекта и события
//
// Параметры:
//  ТипОбъекта - Строка - ДокументОбъект.Метаданные().ПолноеИмя() ("Документ.АвансовыйОтчет")
//	ТипСобытия - Перечисление.PAPI_ТипПодпискиНаСобытие
// 
// Возвращаемое значение:
//  ФиксированныйМассив - имя параметров обработчиков
//
Функция ИменаПараметровОбработчиков(ТипОбъекта, ТипСобытия) Экспорт
	
	ПараметрыТекст = "";
	Если ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ПриКопировании Тогда
		ПараметрыТекст = "Источник,ОбъектКопирования";
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПроверкиЗаполнения Тогда
		ПараметрыТекст = "Источник,Отказ,ПроверяемыеРеквизиты";
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередЗаписью Тогда
		ПараметрыТекст = "Источник,Отказ";
		Если СтрНачинаетсяС(ТипОбъекта, "Документ.") Тогда
			ПараметрыТекст = "Источник,Отказ,РежимЗаписи,РежимПроведения";
		ИначеЕсли СтрНачинаетсяС(ТипОбъекта, "РегистрРасчета.") Тогда
			ПараметрыТекст = "Источник,Отказ,Замещение,ТолькоЗапись,ЗаписьФактическогоПериодаДействия,ЗаписьПерерасчетов";
		ИначеЕсли СтрНачинаетсяС(ТипОбъекта, "РегистрСведений.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "РегистрБухгалтерии.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "РегистрНакопления.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "Последовательность.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "Перерасчет.") 
			Тогда
			ПараметрыТекст = "Источник,Отказ,Замещение";
		КонецЕсли;
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ПриЗаписи Тогда
		ПараметрыТекст = "Источник,Отказ";
		Если СтрНачинаетсяС(ТипОбъекта, "РегистрРасчета.") Тогда
			ПараметрыТекст = "Источник,Отказ,Замещение,ТолькоЗапись,ЗаписьФактическогоПериодаДействия,ЗаписьПерерасчетов";
		ИначеЕсли СтрНачинаетсяС(ТипОбъекта, "РегистрСведений.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "РегистрБухгалтерии.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "РегистрНакопления.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "Последовательность.") 
			ИЛИ   СтрНачинаетсяС(ТипОбъекта, "Перерасчет.") 
			Тогда
			ПараметрыТекст = "Источник,Отказ,Замещение";
		КонецЕсли;
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ПередУдалением Тогда
		ПараметрыТекст = "Источник,Отказ";
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПроведения Тогда
		ПараметрыТекст = "Источник,Отказ,РежимПроведения";
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаУдаленияПроведения Тогда
		ПараметрыТекст = "Источник,Отказ";
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаФормированияПоВерсииИсторииДанных Тогда
		ПараметрыТекст = "Источник,ДанныеВерсии,НомерВерсии,ИсключитьДанные,СтандартнаяОбработка";
		Если СтрНачинаетсяС(ТипОбъекта, "РегистрСведений.") Тогда
			ПараметрыТекст = "Источник,ДанныеВерсии,НомерВерсии,КлючЗаписи,ИсключитьДанные,СтандартнаяОбработка";
		КонецЕсли;
	ИначеЕсли ТипСобытия = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПослеЗаписиВерсийИсторииДанных Тогда
		ПараметрыТекст = "Источник,ИнформацияОЗаписиВерсий";
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив( СтрРазделить(ПараметрыТекст, ",", Ложь) );
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИсполнениеПодписчиковСобытий

Функция НужноОбрабатыватьПодписку(Источник, Событие, Отказ = Ложь)
	
	Если Источник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодписку"+XMLСтрока(Событие))
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьПодписчиковОбъектаПриНеобходимости(Источник);	
	ПодписчикиТекСобытия = Источник.ДополнительныеСвойства.PAPIВсеПодписчикиОбъекта.Получить(Событие);
	Если ПодписчикиТекСобытия <> Неопределено И ПодписчикиТекСобытия.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьПодписчиковОбъектаПриНеобходимости(Источник)
	
	Если Источник.ДополнительныеСвойства.Свойство("PAPIВсеПодписчикиОбъекта") Тогда
		Возврат;
	КонецЕсли;	
	Источник.ДополнительныеСвойства.Вставить("PAPIВсеПодписчикиОбъекта", ВсеПодписчикиОбъекта(Источник));
	
КонецПроцедуры

Функция ВсеПодписчикиОбъекта(Источник)
	
	ВсеПодписчики = Новый Соответствие;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	PAPI_ИсполнителиПодписок.ТипВыполнения КАК ТипВыполнения,
	|	PAPI_ИсполнителиПодписок.ИсполняемыйКод КАК ИсполняемыйКод,
	|	PAPI_ИсполнителиПодписок.Подписка КАК Подписка,
	|	PAPI_ИсполнителиПодписок.Подписка.ВыполнятьВРежимеЗагрузкиДанных КАК ВыполнятьВРежимеЗагрузкиДанных,
	|	PAPI_ИсполнителиПодписок.ТипСобытия КАК ТипСобытия
	|ИЗ
	|	РегистрСведений.PAPI_ИсполнителиПодписок КАК PAPI_ИсполнителиПодписок
	|ГДЕ
	|	(PAPI_ИсполнителиПодписок.ТипОбъекта = &ТипОбъекта ИЛИ PAPI_ИсполнителиПодписок.ТипОбъекта = &ТипРодитель)
	|	И ВЫБОР
	|			КОГДА &РежимЗагрузки
	|				ТОГДА PAPI_ИсполнителиПодписок.Подписка.ВыполнятьВРежимеЗагрузкиДанных
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	PAPI_ИсполнителиПодписок.Приоритет
	|ИТОГИ ПО
	|	ТипСобытия";
	
	
	текТипОбъекта = ПолноеИмяМетаданныхИсточника(Источник);  	
    текТипРодитель= СтрРазделить(текТипОбъекта,".",Ложь)[0]+".";
	
	Запрос.УстановитьПараметр("ТипОбъекта", текТипОбъекта); 
	Запрос.УстановитьПараметр("ТипРодитель", текТипРодитель);
	Запрос.УстановитьПараметр("РежимЗагрузки", Источник.ОбменДанными.Загрузка);
	ВыборкаТипСобытия = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипСобытия.Следующий() Цикл
		ПодписчикиТекСобытия = Новый Массив;
		ВыборкаИсполнители = ВыборкаТипСобытия.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			ПараметрыИсполнителя = Новый Структура("Подписка,ИсполняемыйКод,ВыполнятьВРежимеЗагрузкиДанных");
			ЗаполнитьЗначенияСвойств(ПараметрыИсполнителя, ВыборкаИсполнители);
			ПодписчикиТекСобытия.Добавить(ПараметрыИсполнителя);
		КонецЦикла;
		ВсеПодписчики.Вставить(ВыборкаТипСобытия.ТипСобытия, ПодписчикиТекСобытия);
	КонецЦикла;
	
	Возврат ВсеПодписчики;
	
КонецФункции

Процедура ИсполнитьВсеОбоработчикиСобытияОбъекта(Источник, Событие, ПараметрыОбработчика)
	
	ПараметрыОбработчика.Вставить("Событие", Событие);
	// У событий менеджеров нет свойства ДополнительныеСвойства, поэтому для них нужно получать подписчиков каждый раз
	Если Событие = Перечисления.PAPI_ТипПодпискиНаСобытие.ОбработкаПослеЗаписиВерсийИсторииДанных Тогда
		ВсеИсполнителиПодписки = ВсеПодписчикиОбъекта(Источник.СоздатьЭлемент()).Получить(Событие);
		Если ВсеИсполнителиПодписки = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ВсеИсполнителиПодписки = Источник.ДополнительныеСвойства.PAPIВсеПодписчикиОбъекта.Получить(Событие);
	КонецЕсли;	
	
	Для Каждого ИсполнительПодписки Из ВсеИсполнителиПодписки Цикл				
		ВыполнитьАлгоритмПодписки(ИсполнительПодписки, ПараметрыОбработчика);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьАлгоритмПодписки(_ИсполнительПодписки_, _Параметры_)
	
	Попытка								
		Выполнить(_ИсполнительПодписки_.ИсполняемыйКод);
	Исключение		
		ДанныеСобытия = Строка(_Параметры_.Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки(
				"PAPI.Подписки." + _Параметры_.Событие + "." + _ИсполнительПодписки_.Подписка, 
				ТекстОшибки, 
				ДанныеСобытия
		);  		
	КонецПопытки;
	
КонецПроцедуры

Функция ТекстОбратнойУстановкиПараметровОбработчиков(ПараметрыОбработчика)
	ТекстАлгоритма = ""; 
	ШаблонСтроки = "%1 = ПараметрыОбработчика.%1; ";
	Для Каждого ТекПараметр Из ПараметрыОбработчика Цикл
		ТекстАлгоритма   = ТекстАлгоритма   + СтрШаблон(ШаблонСтроки, ТекПараметр.Ключ);
	КонецЦикла;
	Возврат ТекстАлгоритма;
КонецФункции

#КонецОбласти

// Получить структуру команды
//
// Параметры:
//  ИсполняемыйКод	 - Строка - Произвольный код
//  ТипВыполнения	 - ПеречислениеСсылка.PAPI_ТипВыполнения - Тип команды
//  Алгоритм		 - СправочникСсылка.PAPI_Алгоритмы, Строка - Выполняемый Алгоритм или строка
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами "ИсполняемыйКод, ТипВыполнения, Алгоритм"
//
Функция СтруктураКоманды(ИсполняемыйКод = "", ТипВыполнения = "", Алгоритм = "")
	Возврат Новый Структура("ИсполняемыйКод, ТипВыполнения, Алгоритм", ИсполняемыйКод, ТипВыполнения, Алгоритм);	
КонецФункции	

// Текст запроса отбора подписок на событие
// 
// Возвращаемое значение:
//   Строка - текст запроса 
//
Функция ТекстЗапросаОтбораПодписокНаСобытие()
	
	Результат =
		"ВЫБРАТЬ
		|	PAPI_ПодпискиНаСобытия.Ссылка КАК Ссылка,
		|	PAPI_ПодпискиНаСобытия.Алгоритм КАК Алгоритм,
		|	PAPI_ПодпискиНаСобытия.ВнешняяОбработка КАК ВнешняяОбработка,
		|	PAPI_ПодпискиНаСобытия.ТипВыполнения КАК ТипВыполнения,
		|	&ТипПодписки КАК ТипПодписки,
		|	PAPI_ПодпискиНаСобытия.Приоритет КАК Приоритет,
		|	&Источник КАК Источник,
		|	PAPI_ПодпискиНаСобытия.Настройки КАК Настройки
		|ПОМЕСТИТЬ ВсеПодписки
		|ИЗ
		|	Справочник.PAPI_ПодпискиНаСобытия КАК PAPI_ПодпискиНаСобытия
		|ГДЕ
		|	НЕ PAPI_ПодпискиНаСобытия.ПометкаУдаления
		|	И PAPI_ПодпискиНаСобытия.Разрешен
		|	И PAPI_ПодпискиНаСобытия.Событие = &Событие
		|	И PAPI_ПодпискиНаСобытия.Источники.Источник В(&МассивИсточников)
		|	И PAPI_ПодпискиНаСобытия.Источники.Подписка = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПодписки.ВнешняяОбработка КАК ВнешняяОбработка,
		|	PAPI_ВнешняяОбработкаКоманды.ИсполняемыйТип КАК ИсполняемыйТип,
		|	PAPI_ВнешняяОбработкаКоманды.Наименование КАК Наименование,
		|	PAPI_ВнешняяОбработкаКоманды.ТипПодписки КАК ТипПодписки,
		|	PAPI_ВнешняяОбработкаКоманды.Источник КАК Источник,
		|	ВсеПодписки.ВнешняяОбработка.ПолноеИмяФайла КАК ВнешняяОбработкаПолноеИмяФайла,
		|	PAPI_ВнешняяОбработкаКоманды.Ссылка.БезопасныйРежим КАК БезопасныйРежим
		|ПОМЕСТИТЬ КомандыВнешнейОбработки
		|ИЗ
		|	ВсеПодписки КАК ВсеПодписки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.PAPI_ВнешняяОбработка.Команды КАК PAPI_ВнешняяОбработкаКоманды
		|		ПО ВсеПодписки.ВнешняяОбработка = PAPI_ВнешняяОбработкаКоманды.Ссылка
		|			И ВсеПодписки.Источник = PAPI_ВнешняяОбработкаКоманды.Источник
		|			И ВсеПодписки.ТипПодписки = PAPI_ВнешняяОбработкаКоманды.ТипПодписки
		|ГДЕ
		|	НЕ ВсеПодписки.ВнешняяОбработка.ПометкаУдаления
		|	И ВсеПодписки.ТипВыполнения <> ЗНАЧЕНИЕ(Перечисление.PAPI_ТипВыполнения.Алгоритм)
		|	И PAPI_ВнешняяОбработкаКоманды.Подписка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПодписки.Ссылка КАК Ссылка,
		|	ВсеПодписки.Алгоритм КАК Алгоритм,
		|	ВсеПодписки.ВнешняяОбработка КАК ВнешняяОбработка,
		|	ВсеПодписки.ТипВыполнения КАК ТипВыполнения,
		|	ВсеПодписки.ТипПодписки КАК ТипПодписки,
		|	ВсеПодписки.Приоритет КАК Приоритет,
		|	ВсеПодписки.Источник КАК Источник,
		|	ВсеПодписки.Настройки КАК Настройки,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.ВнешняяОбработкаПолноеИмяФайла, """") КАК ИмяФайла,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.ИсполняемыйТип, """") КАК ИсполняемыйТип,
		|	ЕСТЬNULL(КомандыВнешнейОбработки.БезопасныйРежим, ИСТИНА) КАК БезопасныйРежим
		|ИЗ
		|	ВсеПодписки КАК ВсеПодписки
		|		ЛЕВОЕ СОЕДИНЕНИЕ КомандыВнешнейОбработки КАК КомандыВнешнейОбработки
		|		ПО ВсеПодписки.ВнешняяОбработка = КомандыВнешнейОбработки.ВнешняяОбработка
		|			И ВсеПодписки.ТипПодписки = КомандыВнешнейОбработки.ТипПодписки
		|			И ВсеПодписки.Источник = КомандыВнешнейОбработки.Источник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

