#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

//////////////////////////////////////////////////////////////
// ОбработкаПроверкиЗаполнения

// Обработка проверки заполнения
//
// Параметры:
//  Источник			 -	РегистрСведенийНаборЗаписей,
//  						РегистрБухгалтерииНаборЗаписей, 
//  						РегистрРасчетаНаборЗаписей,
//  						РегистрНакопленияНаборЗаписей, 
//  						БизнесПроцессОбъект, 
//  						ПланВидовРасчетаОбъект, 
//  						ПланСчетовОбъект, 
//  						КритерийОтбораМенеджер,
//  						ПланВидовХарактеристикОбъект, 
//  						ПоследовательностьНаборЗаписей, 
//  						ПланОбменаОбъект, 
//  						ПерерасчетНаборЗаписей, 
//  						КонстантаМенеджерЗначения, 
//  						СправочникОбъект, 
//  						ЗадачаОбъект, 
//  						ДокументОбъект 	 - Источник подписки на событие ОбработкаПроверкиЗаполнения
//  Отказ				 - 	Булево - Признак отказа от выполнения действия
//  ПроверяемыеРеквизиты - 	Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения
//
Процедура ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт 
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаПроверкиЗаполнения")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, ПроверяемыеРеквизиты";
	ТекущееСобытие = "ОбработкаПроверкиЗаполнения";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаПроверкиЗаполнения")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли					
								
				Выполнить_ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, ПроверяемыеРеквизиты);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры
// Описание см. ОбработкаПроверкиЗаполнения.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример "ОбработкаПроверкиЗаполнения"
//
Процедура Выполнить_ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	   
КонецПроцедуры

//////////////////////////////////////////////////////////////
// ПередЗаписью

// Обработчик подписки на событие ПередЗаписью для Документов.
//
// Параметры:
//  Источник        - ДокументОбъект - Источник подписки на событие ПередЗаписью
//  Отказ           - Булево - Признак отказа от выполнения действия
//  РежимЗаписи     - РежимЗаписиДокумента - Параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект
//  РежимПроведения - РежимПроведенияДокумента - Параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект
//
Процедура ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, РежимЗаписи, РежимПроведения";
	ТекущееСобытие = "ПередЗаписью";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Прервать;
			КонецЕсли;	
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли					
								
				Выполнить_ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, РежимЗаписи, РежимПроведения);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры
// Описание см. ПередЗаписью_Документы.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример "ПередЗаписью"
//
Процедура Выполнить_ПередЗаписью_Документы(Источник, Отказ, РежимЗаписи, РежимПроведения, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	   
КонецПроцедуры


// Перед записью объекты без документов
//
// Параметры:
//  Источник  - БизнесПроцессОбъект,
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект - Источник подписки на событие ПередЗаписью.
//  Отказ     - Булево - Признак отказа от выполнения действия.
//
Процедура ПередЗаписью_ОбъектыБезДокументов(Источник, Отказ) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью") 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ";
	ТекущееСобытие = "ПередЗаписью";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью") 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;

			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПередЗаписью_ОбъектыБезДокументов(Источник, Отказ, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры   
// Описание см. ПередЗаписью_ОбъектыБезДокументов.  
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример "ПередЗаписью"
//
Процедура Выполнить_ПередЗаписью_ОбъектыБезДокументов(Источник, Отказ, ПараметрыПодписки)

	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;

КонецПроцедуры


// Перед записью регистр расчета набор записей
//
// Параметры:
//  Источник        - РегистрРасчетаНаборЗаписей - набор записей, передаваемый
//                 	  в подписку на событие ПередЗаписью.
//  Отказ           - Булево - Признак отказа от выполнения действия.
//  Замещение      	- Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//  ТолькоЗапись    - Булево - Признак того, что при записи набора выполняется
//					 только запись набора записей без пересчета фактического периода действия и без обновления перерасчетов.
//  ЗаписьФактическогоПериодаДействия	 - Булево - Признак того, что при записи набора выполняется расчет фактического периода действия. 
//  ЗаписьПерерасчетов					 - Булево - Признак того, что при записи набора выполняется запись перерасчетов регистра. 
//
Процедура ПередЗаписью_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов";
	ТекущееСобытие = "ПередЗаписью";

	// Источник -> "НаборЗаписей"
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие, "", Строка(Источник));
	
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПередЗаписью_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры
// Описание см. ПередЗаписью_РегистрРасчетаНаборЗаписей.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример "ПередЗаписью"
//
Процедура Выполнить_ПередЗаписью_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;

	
КонецПроцедуры


// Перед записью регистры
//
// Параметры:
//  Источник	 -  РегистрСведенийНаборЗаписей, 
//					РегистрБухгалтерииНаборЗаписей, 
//					РегистрНакопленияНаборЗаписей, 
//					ПоследовательностьНаборЗаписей, 
//					ПерерасчетНаборЗаписей	 - 
//  Отказ		 - Булево - Признак отказа от выполнения действия.
//  Замещение    - Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//
Процедура ПередЗаписью_Регистры(Источник, Отказ, Замещение) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, Замещение";
	ТекущееСобытие = "ПередЗаписью";
	
	// Источник -> "НаборЗаписей"
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие, "", Строка(Источник));
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередЗаписью")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
		
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПередЗаписью_Регистры(Источник, Отказ, Замещение, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, Замещение);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры
// Описание см. ПередЗаписью_Регистры
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример "ПередЗаписью"
//
Процедура Выполнить_ПередЗаписью_Регистры(Источник, Отказ, Замещение, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ПриЗаписи

// При записи объекты
//
// Параметры:
//  Источник - 	БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект	 - Источник подписки на событие ПриЗаписи
//  Отказ	 -  Булево - Признак отказа от выполнения действия.
//
Процедура ПриЗаписи_Объекты(Источник, Отказ) Экспорт  
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриЗаписи")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ";
	ТекущееСобытие = "ПриЗаписи";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриЗаписи")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПриЗаписи_Объекты(Источник, Отказ, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры
// Описание см. ПриЗаписи_Объекты.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример "ПередЗаписью"
//
Процедура Выполнить_ПриЗаписи_Объекты(Источник, Отказ, ПараметрыПодписки) Экспорт
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;

КонецПроцедуры  


// При записи регистр расчета набор записей
//
// Параметры:
//  Источник							- РегистрРасчетаНаборЗаписей - Источник подписки на событие ПриЗаписи 
//  Отказ	 							- Булево - Признак отказа от выполнения действия.
//  Замещение    						- Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//  ТолькоЗапись    - Булево - Признак того, что при записи набора выполняется
//					 только запись набора записей без пересчета фактического периода действия и без обновления перерасчетов.
//  ЗаписьФактическогоПериодаДействия	- Булево - Признак того, что при записи набора выполняется расчет фактического периода действия. 
//  ЗаписьПерерасчетов					- Булево - Признак того, что при записи набора выполняется запись перерасчетов регистра.
//
Процедура ПриЗаписи_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриЗаписи")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов";
	ТекущееСобытие = "ПриЗаписи";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие, "", Строка(Источник));
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриЗаписи")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПриЗаписи_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры   
// Описание см. ПриЗаписи_РегистрРасчетаНаборЗаписей.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ПриЗаписи"
//
Процедура Выполнить_ПриЗаписи_РегистрРасчетаНаборЗаписей(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


// При записи регистры
//
// Параметры:
//  Источник	- РегистрСведенийНаборЗаписей, 
//				  РегистрБухгалтерииНаборЗаписей, 
//				  РегистрНакопленияНаборЗаписей, 
//				  ПоследовательностьНаборЗаписей, 
//				  ПерерасчетНаборЗаписей - Источник подписки на событие ПриЗаписи 
//  Отказ	 	- Булево - Признак отказа от выполнения действия.
//  Замещение   - Булево - Признак замещения существующего набора записей. 
//		Истина - запись осуществляется с заменой существующих в базе данных записей набора.
//		Ложь   - запись осуществляется с "дописыванием" текущего набора записей.
//
Процедура ПриЗаписи_Регистры(Источник, Отказ, Замещение) Экспорт
	
   Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриЗаписи")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, Замещение";
	ТекущееСобытие = "ПриЗаписи";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие, "", Строка(Источник));
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриЗаписи")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;

			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПриЗаписи_Регистры(Источник, Отказ, Замещение, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, Замещение);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры    
// Описание см. ПриЗаписи_Регистры
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ПриЗаписи"
//
Процедура Выполнить_ПриЗаписи_Регистры(Источник, Отказ, Замещение, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ПередУдалением

// Перед удалением объекты
//
// Параметры:
//  Источник -  БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Источник подписки на событие ПередУдалением
//  Отказ	 -  Булево - Признак отказа от выполнения действия.
//
Процедура ПередУдалением_Объекты(Источник, Отказ) Экспорт

	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередУдалением")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ";
	ТекущееСобытие = "ПередУдалением";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПередУдалением")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПередУдалением_Объекты(Источник, Отказ, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры
// Описание см. ПередУдалением_Объекты.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ПередУдалением"
//
Процедура Выполнить_ПередУдалением_Объекты(Источник, Отказ, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ПриКопировании

// При копировании объекты
//
// Параметры:
//  Источник  - БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Новый объект, который является приемником копирования. 
//  ОбъектКопирования - БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании_Объекты(Источник, ОбъектКопирования) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриКопировании")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, ОбъектКопирования";
	ТекущееСобытие = "ПриКопировании";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуПриКопировании")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ПриКопировании_Объекты(Источник, ОбъектКопирования, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, ОбъектКопирования);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры
// Описание см. ПриКопировании_Объекты.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ПриКопировании"
//
Процедура Выполнить_ПриКопировании_Объекты(Источник, ОбъектКопирования, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ОбработкаПослеЗаписиВерсийИсторииДанных

// Обработка после записи версий истории данных
//
// Параметры:
//  Источник				 -  РегистрСведенийМенеджер, 
//								ПланСчетовМенеджер, 
//								ДокументМенеджер, 
//								БизнесПроцессМенеджер, 
//								ПланВидовРасчетаМенеджер, 
//								ЗадачаМенеджер, 
//								ПланВидовХарактеристикМенеджер, 
//								СправочникМенеджер - Источник подписки на событие ОбработкаПослеЗаписиВерсийИсторииДанных
//  ИнформацияОЗаписиВерсий	 - КоллекцияИнформацииОЗаписиВерсииИсторииДанных - Содержит информацию о записи версий истории данных
//
Процедура ОбработкаПослеЗаписиВерсийИсторииДанных(Источник, ИнформацияОЗаписиВерсий) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	ПараметрыТекст = "Источник, ИнформацияОЗаписиВерсий";
	ТекущееСобытие = "ОбработкаПослеЗаписиВерсийИсторииДанных";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие, "", Строка(Источник));
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
		
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ОбработкаПослеЗаписиВерсийИсторииДанных(Источник, ИнформацияОЗаписиВерсий, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, ИнформацияОЗаписиВерсий);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры
// Описание см. ОбработкаПослеЗаписиВерсийИсторииДанных
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ОбработкаПослеЗаписиВерсийИсторииДанных"
//
Процедура Выполнить_ОбработкаПослеЗаписиВерсийИсторииДанных(Источник, ИнформацияОЗаписиВерсий, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;		
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ОбработкаПроведения

// Обработка проведения документы
//
// Параметры:
//  Источник		- ДокументОбъект - Источник подписки на событие ОбработкаПроведения
//  Отказ           - Булево - Признак отказа от выполнения действия
//  РежимПроведения - РежимПроведенияДокумента - Параметр, передаваемый в подписку на событие ОбработкаПроведения,
//                    когда Источник это ДокументОбъект
//
Процедура ОбработкаПроведения_Документы(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаПроведения")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ, РежимПроведения";
	ТекущееСобытие = "ОбработкаПроведения";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаПроведения")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ОбработкаПроведения_Документы(Источник, Отказ, РежимПроведения, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ, РежимПроведения);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли; 
	
КонецПроцедуры
// Описание см. ОбработкаПроведения_Документы. 
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ОбработкаПроведения"
//
Процедура Выполнить_ОбработкаПроведения_Документы(Источник, Отказ, РежимПроведения, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
		
КонецПроцедуры


//////////////////////////////////////////////////////////////
// УдаленияПроведения

// Обработка удаления проведения документы обработка
//
// Параметры:
//  Источник - ДокументОбъект - Источник подписки на событие ОбработкаУдаленияПроведения 
//  Отказ    - Булево - Признак отказа от выполнения действия 
//
Процедура ОбработкаУдаленияПроведения_ДокументыОбработка(Источник, Отказ) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Отказ 
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаУдаленияПроведения")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, Отказ";
	ТекущееСобытие = "ОбработкаУдаленияПроведения";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Отказ 
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаУдаленияПроведения")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ОбработкаУдаленияПроведения_ДокументыОбработка(Источник, Отказ, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, Отказ);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры
// Описание см. ОбработкаУдаленияПроведения_ДокументыОбработка.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ОбработкаПроведения"
//
Процедура Выполнить_ОбработкаУдаленияПроведения_ДокументыОбработка(Источник, Отказ, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ОбработкаФормированияПоВерсииИсторииДанных  

// Обработка формирования по версии истории данных объекты и константа менеджер
//
// Параметры:
//  Источник			 -  БизнесПроцессОбъект, 
//							ПланВидовРасчетаОбъект, 
//							ПланСчетовОбъект, 
//							ПланВидовХарактеристикОбъект, 
//							ПланОбменаОбъект, 
//							КонстантаМенеджерЗначения, 
//							СправочникОбъект, 
//							ЗадачаОбъект, 
//							ДокументОбъект	-  Источник подписки на событие ОбработкаФормированияПоВерсииИсторииДанных 
//  ДанныеВерсии		 -  ФиксированнаяСтруктура - Фиксированная структура с данными версии, по которой выполняется формирование
//  НомерВерсии			 - 	Число - Номер версии, по которой выполняется формирование
//  ИсключитьДанные		 - 	Массив - Массив с именами полей и табличных частей, которые будут исключены из стандартной обработки.
//  СтандартнаяОбработка - 	Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаФормированияПоВерсииИсторииДанных_Объекты(Источник, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;

	// Первая проверка
	Если Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаФормированияПоВерсииИсторииДанных")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка";
	ТекущееСобытие = "ОбработкаФормированияПоВерсииИсторииДанных";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие);
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаФормированияПоВерсииИсторииДанных")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
			
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ОбработкаФормированияПоВерсииИсторииДанных_Объекты(Источник, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры
// Описание см. ОбработкаФормированияПоВерсииИсторииДанных_ОбъектыИКонстантаМенеджер.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ОбработкаПроведения"
//
Процедура Выполнить_ОбработкаФормированияПоВерсииИсторииДанных_Объекты(Источник, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


// Обработка формирования по версии истории данных регистр сведений
//
// Параметры:
//  Источник			 -  РегистрСведенийНаборЗаписей - Источник подписки на событие ОбработкаФормированияПоВерсииИсторииДанных
//  ДанныеВерсии		 -  ФиксированнаяСтруктура - Фиксированная структура с данными версии, по которой выполняется формирование
//  НомерВерсии			 - 	Число - Номер версии, по которой выполняется формирование
//  КлючЗаписи			 - 	РегистрСведенийКлючЗаписи - Ключ записи регистра сведений.
//  ИсключитьДанные		 - 	Массив - Массив с именами полей и табличных частей, которые будут исключены из стандартной обработки. 
//  СтандартнаяОбработка - 	Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события. 
//
Процедура ОбработкаФормированияПоВерсииИсторииДанных_РегистрСведений(Источник, ДанныеВерсии, НомерВерсии, КлючЗаписи, ИсключитьДанные, СтандартнаяОбработка) Экспорт

    Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если Источник.ОбменДанными.Загрузка Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// Первая проверка
	Если Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаФормированияПоВерсииИсторииДанных")
		Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекст = "Источник, ДанныеВерсии, НомерВерсии, КлючЗаписи, ИсключитьДанные, СтандартнаяОбработка";
	ТекущееСобытие = "ОбработкаФормированияПоВерсииИсторииДанных";
	
	МассивВыполняемыхКоманд = PAPI_ПодпискиНаСобытия.МассивВыполняемыхКоманд(Источник, ПараметрыТекст, ТекущееСобытие, "", Строка(Источник));
	
	Если ЗначениеЗаполнено(МассивВыполняемыхКоманд) Тогда 								
		
		Для Каждого элМассива Из МассивВыполняемыхКоманд Цикл 
			
			// Постоянная проверка
			Если Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьПодпискуОбработкаФормированияПоВерсииИсторииДанных")
				Или Источник.ДополнительныеСвойства.Свойство("PAPIОтключитьВсеПодписки") Тогда
				Возврат;
			КонецЕсли;
	
			Если элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Произвольный") 
				ИЛИ элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.ВнешняяОбработка") Тогда	
				
				ПараметрыПодписки = Новый Структура("ИсполняемыйКод, Событие", элМассива.ИсполняемыйКод, ТекущееСобытие);
				#Если Клиент Тогда 
					ПараметрыПодписки.Вставить("Клиент", Истина);
				#Иначе
					ПараметрыПодписки.Вставить("Клиент", Ложь);
				#КонецЕсли	
				
				Выполнить_ОбработкаФормированияПоВерсииИсторииДанных_РегистрСведений(Источник, ДанныеВерсии, НомерВерсии, КлючЗаписи, ИсключитьДанные, СтандартнаяОбработка, ПараметрыПодписки);
				
			ИначеЕсли элМассива.ТипВыполнения = ПредопределенноеЗначение("Перечисление.PAPI_ТипВыполнения.Алгоритм") Тогда 
				
				ПараметрыАлгоритма = Новый Структура(ПараметрыТекст, Источник, ДанныеВерсии, НомерВерсии, КлючЗаписи, ИсключитьДанные, СтандартнаяОбработка);
				СтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(элМассива.Алгоритм, ПараметрыАлгоритма);
						
			Иначе     
				
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры
// Описание см. ОбработкаФормированияПоВерсииИсторииДанных_РегистрСведений.
// ПараметрыПодписки - Структура - Параметры используемые в подписке
//		ИсполняемыйКод 	- Строка - Код который передается в Выполнить()
//		Клиент 			- Булево - Код выполняется на клиенте или сервере
//		Событие         - Строка - Пример: "ОбработкаПроведения"
//
Процедура Выполнить_ОбработкаФормированияПоВерсииИсторииДанных_РегистрСведений(Источник, ДанныеВерсии, НомерВерсии, КлючЗаписи, ИсключитьДанные, СтандартнаяОбработка, ПараметрыПодписки)
	
	Попытка
								
		Выполнить(ПараметрыПодписки.ИсполняемыйКод);
										
	Исключение
		
		ДанныеСобытия = Строка(Источник);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписьВЖурналРегистрацииОшибки("PAPI.Подписки." + ПараметрыПодписки.Событие, ТекстОшибки, ДанныеСобытия);  
		
	КонецПопытки;
	
КонецПроцедуры


