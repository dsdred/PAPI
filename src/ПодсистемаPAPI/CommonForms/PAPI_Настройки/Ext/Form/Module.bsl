 
#Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	ДанныеУжеЗаписаны = Ложь;
	
	Если Метаданные.Константы.Найти("PAPI_НастройкаХраненияДанных") <> Неопределено Тогда 
		// Считываем структуру хранящую настройки хранения данных
		СтруктураЗначенийХранения = Константы.PAPI_НастройкаХраненияДанных.СтруктураНастроек();
		ЗаполнитьЗначенияДанныхХранения();
	Иначе
		СтруктураЗначенийХранения = Неопределено;
	КонецЕсли;
	
	// Удаление старых данных 
	Элементы.РасписаниеУдаленияДанных.Заголовок = ТекущееРасписание("PAPI_УдалениеСтарыхДанных");
	АвтоматическиУдалятьУстаревшиеДанные = РегламентВключен("PAPI_УдалениеСтарыхДанных");
	
	// Обновление истории данных 
	Элементы.РасписаниеОбновленияДанных.Заголовок = ТекущееРасписание("PAPI_ИсторияДанныхОбновитьИсторию");
	АвтоматическиОбновлятьДанные = РегламентВключен("PAPI_ИсторияДанныхОбновитьИсторию");
	
	// Обновление подсистемы
	ВерсияPAPI = PAPI_ДанныеДляЗаполненияНастроек.ВерсияРасширения();

	Если Не ЗначениеЗаполнено(НаборКонстант.PAPI_ТекущаяВерсия) Тогда 
		PAPI_ОбщегоНазначенияВызовСервера.ПоменятьЗначениеКонстанты("PAPI_ТекущаяВерсия",
			PAPI_ДанныеДляЗаполненияНастроек.МинимальнаяВерсияДляОбновления(), Истина);	 
			
		// Обновляем значение константы на форме	
		ЗначениеКонстантыТекущаяВерсия = PAPI_ОбщегоНазначенияВызовСервера.ПрочитатьЗначениеКонстанты("PAPI_ТекущаяВерсия"); 
		НаборКонстант.PAPI_ТекущаяВерсия = ЗначениеКонстантыТекущаяВерсия; 	
			
	КонецЕсли;
	
	ПериодПроверкиОбновления = 10;
	ОбновлениеЗапущено = Ложь;
	
	ВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЗаголовокГруппыОбновитьИсторию()
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)  
	
	Если Не ДанныеУжеЗаписаны Тогда 
		ПередЗакрытиемНаСервере(); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	// Флаг не даст зайти повторно
	ДанныеУжеЗаписаны = Истина; 

	Если ЗначениеЗаполнено(СтруктураЗначенийХранения) И ТипЗнч(СтруктураЗначенийХранения) = Тип("Структура") Тогда
		НужноЗаписать = Ложь;
		Если Не СтруктураЗначенийХранения.СрокХраненияВходящиеСообщенияСервисаИнтеграции = СрокХраненияВходящиеСообщенияСервисаИнтеграции Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияВходящиеСообщенияСервисаИнтеграции = СрокХраненияВходящиеСообщенияСервисаИнтеграции;
		КонецЕсли;
		
		Если Не СрокХраненияЗапросНедостающихДанных = СтруктураЗначенийХранения.СрокХраненияЗапросНедостающихДанных Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияЗапросНедостающихДанных = СрокХраненияЗапросНедостающихДанных;
		КонецЕсли;
		
		Если Не СрокХраненияЛогАлгоритмов = СтруктураЗначенийХранения.СрокХраненияЛогАлгоритмов Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияЛогАлгоритмов = СрокХраненияЛогАлгоритмов;
		КонецЕсли;
		
		Если Не СрокХраненияЛогМетодов = СтруктураЗначенийХранения.СрокХраненияЛогМетодов Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияЛогМетодов = СрокХраненияЛогМетодов;
		КонецЕсли;

		Если Не СрокХраненияОчередьАлгоритмов = СтруктураЗначенийХранения.СрокХраненияОчередьАлгоритмов Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияОчередьАлгоритмов = СрокХраненияОчередьАлгоритмов;
		КонецЕсли;

		Если Не СрокХраненияОчередьДокументов = СтруктураЗначенийХранения.СрокХраненияОчередьДокументов Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияОчередьДокументов = СрокХраненияОчередьДокументов;
		КонецЕсли;

		Если Не СрокХраненияРезультатов = СтруктураЗначенийХранения.СрокХраненияРезультатов Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияРезультатов = СрокХраненияРезультатов;
		КонецЕсли;
		
		Если Не СрокХраненияВходящихЗапросов = СтруктураЗначенийХранения.СрокХраненияВходящихЗапросов Тогда 
			НужноЗаписать = Истина;
			СтруктураЗначенийХранения.СрокХраненияВходящихЗапросов = СрокХраненияВходящихЗапросов;
		КонецЕсли;

		
		Если НужноЗаписать Тогда 
			
			PAPI_ОбщегоНазначенияВызовСервера.ПоменятьЗначениеКонстанты("PAPI_НастройкаХраненияДанных", Новый ХранилищеЗначения(СтруктураЗначенийХранения)); 
			
		КонецЕсли;
    КонецЕсли;


КонецПроцедуры


#КонецОбласти

#Область Страницы

/////// PAPI_ОтложенныеОперации ///////

#Область Страница_ОтложенныеОперации

&НаКлиенте
Процедура PAPI_КоличествоПопытокОчередиДокументовПриИзменении(Элемент)

	ИмяКонстанты = Элемент.Имя;
	ОбновитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияОчередьДокументовПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры 

#КонецОбласти


/////// PAPI_ВычисляемыеПодсистемы ///////

#Область Страницы_ВычисляемыхПодсистем

#Область СтраницаОсновная

&НаКлиенте
Процедура PAPI_ДатаЗапретаОбменаДокументовПриИзменении(Элемент)
	
	ИмяКонстанты = Элемент.Имя;
	ОбновитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСервисыИнтеграции

&НаКлиенте
Процедура PAPI_ОбменыВключеныПриИзменении(Элемент)
	
	ИмяКонстанты = Элемент.Имя;      
	ПроверяемаяПодсистема = "PAPI.PAPI_ВычисляемыеПодсистемы.PAPI_Алгоритмы.PAPI_СервисыИнтеграции";
	ОбновитьЗначениеКонстантыИЗапускОбменов(ИмяКонстанты, ПроверяемаяПодсистема);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PAPI_ИсточникПриИзменении(Элемент)
	
	ИмяКонстанты = Элемент.Имя;
	ОбновитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура PAPI_ЛогированиеВходящихСообщенийСервисаИнтеграцииПриИзменении(Элемент)
	
	ИмяКонстанты = Элемент.Имя;
	ОбновитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры    

#КонецОбласти


#КонецОбласти


/////// PAPI_ИсторияДанных ///////

#Область Страница_ИсторияДанных

&НаКлиенте
Процедура НастройкаСоставаИсторияДанных(Команда)
	 
	ОткрытьФорму("Обработка.PAPI_НастройкаСоставаИсторииДанных.Форма",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

 &НаКлиенте
Процедура НастройкаХраненияИсторииДанных(Команда)
	
	ОткрытьФорму("РегистрСведений.PAPI_НастройкиХраненияИстории.Форма.НастройкаИсторииХранения",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура PAPI_ВыполнитьОбработкуПослеЗаписиВерсийПриИзменении(Элемент)
	
	ИмяКонстанты = Элемент.Имя;
	ОбновитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;
	
	ОбновитьЗаголовокГруппыОбновитьИсторию();
	
КонецПроцедуры

&НаКлиенте
Процедура PAPI_АвтоУдалениеИзОбработкиПослеЗаписиВерсийПриИзменении(Элемент)
	
	ИмяКонстанты = Элемент.Имя;
	ОбновитьЗначениеКонстанты(ИмяКонстанты);
	
	Если Модифицированность Тогда 
		Модифицированность = Ложь;
	КонецЕсли;
	
	ОбновитьЗаголовокГруппыОбновитьИсторию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокГруппыОбновитьИсторию()
	
	ШаблонЗаголовка = "ИсторияДанных.ОбновитьИсторию(%1, %2)";
	
	ВыполнитьОбработкуПослеЗаписиВерсий 	= PAPI_ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстантыЕслиВозможно("PAPI_ВыполнитьОбработкуПослеЗаписиВерсий", Ложь);
	АвтоУдалениеИзОбработкиПослеЗаписиВерсий= PAPI_ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстантыЕслиВозможно("PAPI_АвтоУдалениеИзОбработкиПослеЗаписиВерсий", Ложь);
	
	Элементы.ОбновитьИсторию.Заголовок = СтрШаблон(ШаблонЗаголовка, 
		Формат(ВыполнитьОбработкуПослеЗаписиВерсий, "БЛ=Ложь; БИ=Истина"),
		Формат(АвтоУдалениеИзОбработкиПослеЗаписиВерсий, "БЛ=Ложь; БИ=Истина"));
	
КонецПроцедуры	

&НаКлиенте
Процедура АвтоматическиОбновлятьДанныеПриИзменении(Элемент)
	
	УстановитьПараметрРегламентногоЗадания("Использование", АвтоматическиОбновлятьДанные, "PAPI_ИсторияДанныхОбновитьИсторию");
	Элементы.РасписаниеОбновленияДанных.Доступность = АвтоматическиОбновлятьДанные;
	Элементы.НастроитьРасписаниеОбновленияДанных.Доступность = АвтоматическиОбновлятьДанные;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбновленияДанных(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание("PAPI_ИсторияДанныхОбновитьИсторию"));
	ДопПараметр = Новый Структура("ИмяРегламентногоЗадания,ЭлементРасписания", "PAPI_ИсторияДанныхОбновитьИсторию", "РасписаниеОбновленияДанных");
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, ДопПараметр);
	ДиалогРасписания.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеДанных(Команда)
	ВыполнитьОбновлениеДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеДанныхНаСервере()
	PAPI_ИсторияДанных.ОбновитьИсториюНаСервере();
КонецПроцедуры



#КонецОбласти


/////// PAPI_ЧисткаСтарыхДанных ///////

#Область Страница_ЧисткаСтарыхДанных

&НаКлиенте
Процедура СрокХраненияВходящиеСообщенияСервисаИнтеграцииПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияЗапросНедостающихДанныхПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияЛогАлгоритмовПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияЛогМетодовПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияОчередьАлгоритмовПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияРезультатовПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры  

&НаКлиенте
Процедура СрокХраненияВходящихЗапросовПриИзменении(Элемент)
	СброситьФлагиСохраненияПараметровХранения();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиУдалятьУстаревшиеДанныеПриИзменении(Элемент)
	
	УстановитьПараметрРегламентногоЗадания("Использование", АвтоматическиУдалятьУстаревшиеДанные, "PAPI_УдалениеСтарыхДанных");
	Элементы.РасписаниеУдаленияДанных.Доступность = АвтоматическиУдалятьУстаревшиеДанные;
	Элементы.НастроитьРасписаниеУдаленияДанных.Доступность = АвтоматическиУдалятьУстаревшиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеУдаленияДанных(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание("PAPI_УдалениеСтарыхДанных"));
	ДопПараметр = Новый Структура("ИмяРегламентногоЗадания,ЭлементРасписания", "PAPI_УдалениеСтарыхДанных", "РасписаниеУдаленияДанных");
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, ДопПараметр);
	ДиалогРасписания.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдалениеДанных(Команда)
	ВыполнитьУдалениеДанныхВручнуюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУдалениеДанныхВручнуюНаСервере()
	
	PAPI_АсинхронныеОперации.УдалениеСтарыхДанных(); 

КонецПроцедуры




#КонецОбласти


/////// Обновление ///////

#Область Страница_СтраницаОбновление

&НаКлиенте
Процедура ОбновитьPAPI(Команда)
	
	Если Не ЗначениеЗаполнено(НаборКонстант.PAPI_ТекущаяВерсия) Тогда 
		PAPI_ОбщегоНазначенияВызовСервера.ПоменятьЗначениеКонстанты("PAPI_ТекущаяВерсия",
			PAPI_ДанныеДляЗаполненияНастроек.МинимальнаяВерсияДляОбновления(), Истина);	
		ЗначениеКонстантыТекущаяВерсия = PAPI_ОбщегоНазначенияВызовСервера.ПрочитатьЗначениеКонстанты("PAPI_ТекущаяВерсия"); 
		НаборКонстант.PAPI_ТекущаяВерсия = ЗначениеКонстантыТекущаяВерсия; 
	КонецЕсли;	
	
	// Проверяем требуется ли установить обновления  
	Если Не PAPI_ОбщегоНазначенияВызовСервера.ВерсияСтаршеИлиРавнаВерсии(НаборКонстант.PAPI_ТекущаяВерсия, ВерсияPAPI, Истина) Тогда 
					
		ИмяВыполняемогоМетода = "PAPI_АсинхронныеОперации.ВыполнитьНеобходимыеОбновления";
		РезультатЗадание = ЗапуститьФоновоеЗаданиеОбновление(ИмяВыполняемогоМетода, НаборКонстант.PAPI_ТекущаяВерсия);
		Если Не ПустаяСтрока(РезультатЗадание.ТекстОшибки) Тогда  	
			СписокОшибокОбновления.Добавить(РезультатЗадание.ТекстОшибки); 
			//PAPI_ОбщегоНазначенияКлиентСервер.КраткоеСообщениеПользователю(РезультатЗадание.ТекстОшибки);
		Иначе
			ОбновлениеЗапущено = Истина;
		КонецЕсли;	

	КонецЕсли;
	
	// Обновление списка
	Если ОбновлениеЗапущено Тогда 
		ПодключитьОбработчикОжидания("ОбновитьИнформациюПоОбновлению", ПериодПроверкиОбновления, Истина);  
	КонецЕсли;
	Элементы.ОбновлениеКартинка.Видимость = ОбновлениеЗапущено;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоОбновлению()
	
	ИмяВыполняемогоМетода = "PAPI_АсинхронныеОперации.ВыполнитьНеобходимыеОбновления";
	ФильтрОтбора = Новый Структура;
	ФильтрОтбора.Вставить("ИмяМетода", ИмяВыполняемогоМетода);

	РезультатЗадание = PAPI_ОбщегоНазначенияВызовСервера.НайтиФоновоеЗаданиеПоФильтрОтбора(ФильтрОтбора);
	Если Не РезультатЗадание.Выполняется Тогда
		
		ОбновлениеЗапущено = Ложь;
		значениеКонстантыТекущаяВерсия = PAPI_ОбщегоНазначенияВызовСервера.ПрочитатьЗначениеКонстанты("PAPI_ТекущаяВерсия"); 
		НаборКонстант.PAPI_ТекущаяВерсия = значениеКонстантыТекущаяВерсия; 
		
	КонецЕсли;		
	
	Если Не РезультатЗадание.Успех И Не ПустаяСтрока(РезультатЗадание.ТекстОшибки) Тогда  	
		СписокОшибокОбновления.Добавить(РезультатЗадание.ТекстОшибки); 
		//PAPI_ОбщегоНазначенияКлиентСервер.КраткоеСообщениеПользователю(РезультатЗадание.ТекстОшибки);
	КонецЕсли;
	
	// Обновление списка
	Если ОбновлениеЗапущено Тогда 
		ПодключитьОбработчикОжидания("ОбновитьИнформациюПоОбновлению", ПериодПроверкиОбновления, Истина); 
	Иначе
		// Обновление PAPI 
		НужноОбновиться = Не PAPI_ОбщегоНазначенияВызовСервера.ВерсияСтаршеИлиРавнаВерсии(НаборКонстант.PAPI_ТекущаяВерсия, ВерсияPAPI, Истина);
		Элементы.ОбновлениеНеОк.Видимость = НужноОбновиться;
		Элементы.ОбновлениеОк.Видимость = Не НужноОбновиться; 
		Элементы.ОбновитьPAPI.Видимость = НужноОбновиться;	
	КонецЕсли;
    Элементы.ОбновлениеКартинка.Видимость = ОбновлениеЗапущено;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеЗаданиеОбновление(ИмяВыполняемогоМетода, ТекущаяВерсия) 
	
	Результат = Новый Структура("Отработал, ТекстОшибки, Сообщение", Ложь, "", "");
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	ФильтрОтбора = Новый Структура;
	ФильтрОтбора.Вставить("ИмяМетода", ИмяВыполняемогоМетода);   
	
	РезультатЗадание = PAPI_ОбщегоНазначенияВызовСервера.НайтиФоновоеЗаданиеПоФильтрОтбора(ФильтрОтбора);	
	ТекстОшибки = "";
	Если Не РезультатЗадание.Успех И Не ПустаяСтрока(РезультатЗадание.ТекстОшибки) Тогда 

		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка",
			Перечисления.PAPI_ТипЛога.Ошибка, 
			РезультатЗадание.ТекстОшибки, 
			СтрШаблон("ИмяМетода: %1", ИмяВыполняемогоМетода));
			
		Результат.ТекстОшибки = РезультатЗадание.ТекстОшибки;	
		
	КонецЕсли;
		
	Если РезультатЗадание.Выполняется Тогда 
		
		Результат.Сообщение = "Задание ""Обновление версии"" выполняется...";	
		Результат.Отработал	= Ложь;
				
	Иначе
		
		Результат.Сообщение = "Задание ""Обновление версии"" запущено...";		
		Результат.Отработал	= Истина; 
		Результат.ТекстОшибки = "";

		
		// Запускаем задание
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Новый Структура("ТекущаяВерсия", ТекущаяВерсия));	
		ФоновыеЗадания.Выполнить(ИмяВыполняемогоМетода, ПараметрыЗадания);	
	    
	КонецЕсли;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
	Возврат Результат; 
	
КонецФункции



#КонецОбласти



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СброситьФлагиСохраненияПараметровХранения()
	Если ДанныеУжеЗаписаны Тогда 
		ДанныеУжеЗаписаны = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеКонстантыИЗапускОбменов(ИмяКонстанты, ПроверяемаяПодсистема)
		
	Если PAPI_ОбщегоНазначенияВызовСервера.ПодсистемаСуществует(ПроверяемаяПодсистема) Тогда 
		МодульСервисыИнтеграции = PAPI_ОбщегоНазначенияВызовСервера.ОбщийМодуль("PAPI_СервисыИнтеграции");
		
		Если ТипЗнч(МодульСервисыИнтеграции) = Тип("ОбщийМодуль") Тогда
			PAPI_ОбщегоНазначенияВызовСервера.ПоменятьЗначениеКонстанты(ИмяКонстанты, НаборКонстант[ИмяКонстанты]);    
					
			Если PAPI_ОбщегоНазначенияВызовСервера.ПрочитатьЗначениеКонстанты(ИмяКонстанты) Тогда 
				МодульСервисыИнтеграции.ВыполнитьОбработкуНаСервере();	
			Иначе
				МодульСервисыИнтеграции.ОстановитьОбработкуНаСервере();	
			КонецЕсли;	 
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьЗначениеКонстанты(ИмяКонстанты)   
	
	PAPI_ОбщегоНазначенияВызовСервера.ПоменятьЗначениеКонстанты(ИмяКонстанты, НаборКонстант[ИмяКонстанты]); 
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЗначенияДанныхХранения()
	
	СрокХраненияВходящиеСообщенияСервисаИнтеграции = СтруктураЗначенийХранения.СрокХраненияВходящиеСообщенияСервисаИнтеграции;
	СрокХраненияЗапросНедостающихДанных = СтруктураЗначенийХранения.СрокХраненияЗапросНедостающихДанных;
	СрокХраненияЛогАлгоритмов 			= СтруктураЗначенийХранения.СрокХраненияЛогАлгоритмов;
	СрокХраненияЛогМетодов 				= СтруктураЗначенийХранения.СрокХраненияЛогМетодов;
    СрокХраненияОчередьАлгоритмов 		= СтруктураЗначенийХранения.СрокХраненияОчередьАлгоритмов;
	СрокХраненияОчередьДокументов 		= СтруктураЗначенийХранения.СрокХраненияОчередьДокументов;
    СрокХраненияРезультатов 			= СтруктураЗначенийХранения.СрокХраненияРезультатов;
	СрокХраненияВходящихЗапросов 		= СтруктураЗначенийХранения.СрокХраненияВходящихЗапросов;
	
КонецПроцедуры	

&НаСервере
Процедура ВидимостьИДоступностьЭлементов()
	
	// Вычисляемые подсистемы - Служебные
	Элементы.СтраницаСлужебные.Видимость = НаборКонстант.Свойство("PAPI_ДатаЗапретаОбменаДокументов");
	
	// Настройка хранения данных
	ЕстьИсточник = НаборКонстант.Свойство("PAPI_Источник");
	ЕстьЛогВхССИ = НаборКонстант.Свойство("PAPI_ЛогированиеВходящихСообщенийСервисаИнтеграции");
	ЕстьОбменыСИВкл = НаборКонстант.Свойство("PAPI_ОбменыСервисовИнтеграцииВключены");
	
	Если Не ЕстьИсточник И Не ЕстьЛогВхССИ Тогда 
		Элементы.ГруппаСообщенияСервисовИнтеграции.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не ЕстьИсточник И Не ЕстьЛогВхССИ и Не ЕстьОбменыСИВкл Тогда 
		Элементы.СтраницаСервисыИнтеграции.Видимость = Ложь;
	КонецЕсли;	
	
	ЕстьКолПопытокОчередиДокументов = НаборКонстант.Свойство("PAPI_КоличествоПопытокОчередиДокументов"); 
	
	ЕстьЧисткаСтарыхДанных = ЗначениеЗаполнено(СтруктураЗначенийХранения);
	
	Элементы.СтраницаЧисткаСтарыхДанных.Видимость = ЕстьЧисткаСтарыхДанных;
	Элементы.ГруппаОчередьДействийСДокументами.Видимость = ЕстьКолПопытокОчередиДокументов; 
	
	Если Не ЕстьЧисткаСтарыхДанных и Не ЕстьКолПопытокОчередиДокументов Тогда 
		Элементы.СтраницаОтложенныеОперации.Видимость = Ложь;
	КонецЕсли;

	// Удаление старых данных Регламент
	Элементы.РасписаниеУдаленияДанных.Доступность = АвтоматическиУдалятьУстаревшиеДанные;
	Элементы.НастроитьРасписаниеУдаленияДанных.Доступность = АвтоматическиУдалятьУстаревшиеДанные;	
		
	
	// История данных++
	ЕстьИсторияДанных = PAPI_ОбщегоНазначенияВызовСервера.ПодсистемаСуществует("PAPI.PAPI_ИсторияДанных");	
	Элементы.СтраницаИсторияДанных.Видимость = ЕстьИсторияДанных;	
	
	// С 0.9.3.4
	Элементы.РасписаниеОбновленияДанных.Доступность = АвтоматическиОбновлятьДанные;
	Элементы.НастроитьРасписаниеОбновленияДанных.Доступность = АвтоматическиОбновлятьДанные;
	// История данных--

	
	// Обновление PAPI 
	НужноОбновиться = Не PAPI_ОбщегоНазначенияВызовСервера.ВерсияСтаршеИлиРавнаВерсии(НаборКонстант.PAPI_ТекущаяВерсия, ВерсияPAPI, Истина);
	Элементы.ОбновлениеНеОк.Видимость = НужноОбновиться;
	Элементы.ОбновлениеКартинка.Видимость = ОбновлениеЗапущено;
	Элементы.ОбновлениеОк.Видимость = Не НужноОбновиться; 
	Элементы.ОбновитьPAPI.Видимость = НужноОбновиться;
	
КонецПроцедуры


#Область РаботаСРегламентами

// Текущее расписание регламентного задания
//
// Параметры:
//  ИмяРегламентногоЗадания	 - Строка - Имя регламентного задания
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания - Текущее расписание запуска регламентного задания
//
&НаСервере
Функция ТекущееРасписание(ИмяРегламентногоЗадания)
	Возврат ПолучитьПараметрРегламентногоЗадания("Расписание", Новый РасписаниеРегламентногоЗадания, ИмяРегламентногоЗадания);
КонецФункции 

// Возвращаем значение параметра Использование
//
// Параметры:
//  ИмяРегламентногоЗадания	 - Строка - Имя регламентного задания 
// 
// Возвращаемое значение:
//  Булево - Установлен ли параметр "Использования" в истину у регламентного задания 
//
&НаСервере
Функция РегламентВключен(ИмяРегламентногоЗадания)
	Возврат ПолучитьПараметрРегламентногоЗадания("Использование", Ложь, ИмяРегламентногоЗадания);
КонецФункции

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПоУмолчанию, ИмяРегламентногоЗадания)
	
	ПараметрыЗадания = Новый Структура;
    ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяРегламентногоЗадания]);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПараметрыЗадания);
	Для Каждого Задание Из СписокЗаданий Цикл
		Возврат Задание[ИмяПараметра];
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию; 
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра, ИмяРегламентногоЗадания) 
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяРегламентногоЗадания]);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяРегламентногоЗадания]);
		Задание = PAPI_ОбщегоНазначенияВызовСервера.ДобавитьРегламентноеЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл 
			Идентификатор = PAPI_ОбщегоНазначенияВызовСервера.УточненныйИдентификаторЗадания(Задание);  	
			PAPI_ОбщегоНазначенияВызовСервера.ИзменитьРегламентноеЗадание(Идентификатор, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт 
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПараметрРегламентногоЗадания("Расписание", Расписание, ДополнительныеПараметры.ИмяРегламентногоЗадания);
	Элементы[ДополнительныеПараметры.ЭлементРасписания].Заголовок = Расписание;
	
КонецПроцедуры



#КонецОбласти


#КонецОбласти